<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Direct2D1</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Direct2D1.Mesh">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Mesh</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Resource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Resource</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Resource.GetFactory(SharpDX.Direct2D1.Factory@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="factory">No documentation.</param>
            <unmanaged>void ID2D1Resource::GetFactory([Out] ID2D1Factory** factory)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Resource.Factory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1Resource::GetFactory([Out] ID2D1Factory** factory)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.#ctor(SharpDX.Direct2D1.RenderTarget)">
            <summary>	
            Create a mesh that uses triangles to describe a shape.	
            </summary>	
            <remarks>	
            To populate a mesh, use its {{Open}} method to obtain an <see cref="T:SharpDX.Direct2D1.TessellationSink"/>. To draw the mesh, use the render target's {{FillMesh}} method.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <unmanaged>HRESULT CreateMesh([Out] ID2D1Mesh** mesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Triangle[])">
            <summary>	
            Create a mesh that uses triangles to describe a shape and populates it with triangles.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="triangles">An array of <see cref="T:SharpDX.Direct2D1.Triangle"/> structures that describe the triangles to add to this mesh.</param>
            <unmanaged>HRESULT CreateMesh([Out] ID2D1Mesh** mesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.Open">
            <summary>	
            Opens the mesh for population.	
            </summary>	
            <returns>When this method returns, contains a pointer to a pointer to an <see cref="T:SharpDX.Direct2D1.TessellationSink"/> that is used to populate the mesh. This parameter is passed uninitialized.</returns>
            <unmanaged>HRESULT Open([Out] ID2D1TessellationSink** tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Mesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.Open_(SharpDX.Direct2D1.TessellationSink@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="tessellationSink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Mesh::Open([Out] ID2D1TessellationSink** tessellationSink)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.MeasuringMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.MeasuringMode.Natural">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.MeasuringMode.GdiClassic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.MeasuringMode.GdiNatural">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Cff">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_CFF</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Truetype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.TruetypeCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Type1Pfm">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Type1Pfb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFB</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Vector">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_VECTOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Bitmap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_BITMAP</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFaceType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Cff">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_CFF</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Truetype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.TruetypeCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Type1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_TYPE1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Vector">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_VECTOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Bitmap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_BITMAP</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_UNKNOWN</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontSimulations">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontSimulations.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontSimulations.Bold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontSimulations.Oblique">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS_OBLIQUE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontWeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Thin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_THIN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.ExtraLight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_LIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.UltraLight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_LIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Light">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_LIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Regular">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_REGULAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Medium">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_MEDIUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.DemiBold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_DEMI_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.SemiBold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_SEMI_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Bold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.ExtraBold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.UltraBold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Black">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_BLACK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Heavy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_HEAVY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.ExtraBlack">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BLACK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.UltraBlack">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BLACK</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontStretch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Undefined">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.UltraCondensed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_ULTRA_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.ExtraCondensed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_EXTRA_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Condensed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.SemiCondensed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_SEMI_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Medium">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_MEDIUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.SemiExpanded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_SEMI_EXPANDED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Expanded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_EXPANDED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.ExtraExpanded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_EXTRA_EXPANDED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.UltraExpanded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_ULTRA_EXPANDED</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStyle.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStyle.Oblique">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE_OBLIQUE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStyle.Italic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE_ITALIC</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InformationalStringId">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_ID</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.CopyrightNotice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.VersionStrings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Trademark">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_TRADEMARK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Manufacturer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_MANUFACTURER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Designer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.DesignerUrl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER_URL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Description">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.FontVendorUrl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.LicenseDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.LicenseInformationUrl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Win32FamilyNames">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Win32SubfamilyNames">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.PreferredFamilyNames">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.PreferredSubfamilyNames">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.SampleText">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FactoryType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FACTORY_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FactoryType.Shared">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FACTORY_TYPE_SHARED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FactoryType.Isolated">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FACTORY_TYPE_ISOLATED</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.PixelGeometry.Flat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY_FLAT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.PixelGeometry.Rgb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY_RGB</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.PixelGeometry.Bgr">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY_BGR</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.RenderingMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.Aliased">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_ALIASED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeGdiClassic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeGdiNatural">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeNatural">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeNaturalSymmetric">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.Outline">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_OUTLINE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ReadingDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ReadingDirection.LeftToRight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION_LEFT_TO_RIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ReadingDirection.RightToLeft">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION_RIGHT_TO_LEFT</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FlowDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FlowDirection.TopToBottom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAlignment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextAlignment.Leading">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT_LEADING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextAlignment.Trailing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT_TRAILING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextAlignment.Center">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT_CENTER</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ParagraphAlignment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ParagraphAlignment.Near">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_NEAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ParagraphAlignment.Far">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_FAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ParagraphAlignment.Center">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_CENTER</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.WordWrapping">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.WordWrapping.Wrap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING_WRAP</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.WordWrapping.NoWrap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING_NO_WRAP</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LineSpacingMethod">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_LINE_SPACING_METHOD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineSpacingMethod.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_LINE_SPACING_METHOD_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineSpacingMethod.Uniform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_LINE_SPACING_METHOD_UNIFORM</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TrimmingGranularity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TrimmingGranularity.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TrimmingGranularity.Character">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY_CHARACTER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TrimmingGranularity.Word">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY_WORD</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFeatureTag">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.AlternativeFractions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.PetiteCapitalsFromCapitals">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SmallCapitalsFromCapitals">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ContextualAlternates">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.CaseSensitiveForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.GlyphCompositionDecomposition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ContextualLigatures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.CapitalSpacing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ContextualSwash">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.CursivePositioning">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.DiscretionaryLigatures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ExpertForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Fractions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_FRACTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.FullWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_FULL_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HalfForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HalantForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HALANT_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.AlternateHalfWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HistoricalForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HorizontalKanaAlternates">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HistoricalLigatures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HalfWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HojoKanjiForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis04Forms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS04_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis78Forms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS78_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis83Forms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS83_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis90Forms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS90_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Kerning">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_KERNING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StandardLigatures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.LiningFigures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_LINING_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.LocalizedForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.MarkPositioning">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.MathematicalGreek">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.MarkToMarkPositioning">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.AlternateAnnotationForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.NlcKanjiForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.OldStyleFigures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Ordinals">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ORDINALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ProportionalAlternateWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.PetiteCapitals">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ProportionalFigures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ProportionalWidths">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.QuarterWidths">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.RequiredLigatures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.RubyNotationForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticAlternates">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ScientificInferiors">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SmallCapitals">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SimplifiedForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet3">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet4">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet5">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet6">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet7">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet8">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet9">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet10">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet11">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet12">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet13">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet14">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet15">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet16">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet17">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet18">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet19">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet20">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Subscript">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SUBSCRIPT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Superscript">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Swash">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SWASH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Titling">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TITLING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.TraditionalNameForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.TabularFigures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.TraditionalForms">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ThirdWidths">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Unicase">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_UNICASE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SlashedZero">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ScriptShapes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptShapes.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptShapes.NoVisual">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES_NO_VISUAL</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.BreakCondition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.Neutral">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_NEUTRAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.CanBreak">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_CAN_BREAK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.MayNotBreak">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_MAY_NOT_BREAK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.MustBreak">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_MUST_BREAK</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.NumberSubstitutionMethod">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.FromCulture">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.Contextual">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.National">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.Traditional">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextureType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXTURE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextureType.Aliased1x1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXTURE_ALIASED_1x1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextureType.Cleartype3x1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXTURE_CLEARTYPE_3x1</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.RenderingParams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteRenderingParams</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(SharpDX.DirectWrite.Factory)">
            <summary>	
            Creates a rendering parameters object with default settings for the primary monitor. Different monitors may have different rendering parameters, for more information see the {{How to Add Support for Multiple Monitors}} topic.	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <unmanaged>HRESULT IDWriteFactory::CreateRenderingParams([Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(SharpDX.DirectWrite.Factory,System.IntPtr)">
            <summary>	
            Creates a rendering parameters object with default settings for the specified monitor. In most cases, this is the preferred way to create a rendering parameters object.	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="monitorHandle">A handle for the specified monitor. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateMonitorRenderingParams([None] void* monitor,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(SharpDX.DirectWrite.Factory,System.Single,System.Single,System.Single,SharpDX.DirectWrite.PixelGeometry,SharpDX.DirectWrite.RenderingMode)">
            <summary>	
            Creates a rendering parameters object with the specified properties. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="gamma">The gamma level to be set for the new rendering parameters object. </param>
            <param name="enhancedContrast">The enhanced contrast level to be set for the new rendering parameters object. </param>
            <param name="clearTypeLevel">The ClearType level to be set for the new rendering parameters object. </param>
            <param name="pixelGeometry">Represents the internal structure of a device pixel (that is, the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text. </param>
            <param name="renderingMode">A value that represents the method (for example, ClearType natural quality) for rendering glyphs. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomRenderingParams([None] float gamma,[None] float enhancedContrast,[None] float clearTypeLevel,[None] DWRITE_PIXEL_GEOMETRY pixelGeometry,[None] DWRITE_RENDERING_MODE renderingMode,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.RenderingParams"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetGamma">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteRenderingParams::GetGamma()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetEnhancedContrast">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteRenderingParams::GetEnhancedContrast()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetClearTypeLevel">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteRenderingParams::GetClearTypeLevel()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetPixelGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_PIXEL_GEOMETRY IDWriteRenderingParams::GetPixelGeometry()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetRenderingMode">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_RENDERING_MODE IDWriteRenderingParams::GetRenderingMode()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.Gamma">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteRenderingParams::GetGamma()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.EnhancedContrast">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteRenderingParams::GetEnhancedContrast()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.ClearTypeLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteRenderingParams::GetClearTypeLevel()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.PixelGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY IDWriteRenderingParams::GetPixelGeometry()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.RenderingMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE IDWriteRenderingParams::GetRenderingMode()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GdiInterop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteGdiInterop</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.FromLogFont(System.Object)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="logFont">A structure containing a GDI-compatible font description. </param>
            <returns>a  reference to a newly created <see cref="T:SharpDX.DirectWrite.Font"/>. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const LOGFONTW* logFont,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ToLogFont(SharpDX.DirectWrite.Font,System.Object)">
            <summary>	
            Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font. 	
            </summary>	
            <remarks>	
            The conversion to a  LOGFONT by using ConvertFontToLOGFONT operates at the logical font level and does not guarantee that it will map to a specific physical font. It is not guaranteed that GDI will select the same physical font for displaying  text formatted by a LOGFONT as the <see cref="T:SharpDX.DirectWrite.Font"/> object that was converted. 	
            </remarks>	
            <param name="font">An <see cref="T:SharpDX.DirectWrite.Font"/> object to be converted into a GDI-compatible LOGFONT structure. </param>
            <param name="logFont">When this method returns, contains a structure that receives a GDI-compatible font description. </param>
            <returns> TRUE if the specified font object is part of the system font collection; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontToLOGFONT([None] IDWriteFont* font,[In] LOGFONTW* logFont,[Out] BOOL* isSystemFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.FromSystemDrawingFont(System.Drawing.Font)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="font">A <see cref="T:System.Drawing.Font"/> description. </param>
            <returns>a reference to a newly created <see cref="T:SharpDX.DirectWrite.Font"/>. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const LOGFONTW* logFont,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ToSystemDrawingFont(SharpDX.DirectWrite.Font,System.Drawing.Font@)">
            <summary>
            Convert a Direct2D <see cref="T:SharpDX.DirectWrite.Font"/> to a <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="d2dFont">a Direct2D Font</param>
            <param name="font">a <see cref="T:System.Drawing.Font"/></param>
            <returns>true if the specified font object is part of the system font collection; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.GdiInterop"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.CreateFontFromLOGFONT(System.IntPtr,SharpDX.DirectWrite.Font@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="logFont">No documentation.</param>
            <param name="font">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const void* logFont,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ConvertFontToLOGFONT(SharpDX.DirectWrite.Font,System.IntPtr,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="font">No documentation.</param>
            <param name="logFont">No documentation.</param>
            <param name="isSystemFont">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontToLOGFONT([None] IDWriteFont* font,[In] void* logFont,[Out] BOOL* isSystemFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ConvertFontFaceToLOGFONT(SharpDX.DirectWrite.FontFace,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="font">No documentation.</param>
            <param name="logFont">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontFaceToLOGFONT([None] IDWriteFontFace* font,[In] void* logFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.CreateFontFaceFromHdc(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="hdc">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFaceFromHdc([None] void* hdc,[Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.CreateBitmapRenderTarget(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="hdc">No documentation.</param>
            <param name="width">No documentation.</param>
            <param name="height">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateBitmapRenderTarget([In, Optional] void* hdc,[None] int width,[None] int height,[Out] IDWriteBitmapRenderTarget** renderTarget)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.EllipsisTrimming">
            <summary>
            An inline object for trimming, using an ellipsis as the omission sign.
            </summary>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectNative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteInlineObject</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteInlineObject</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObject.Draw(System.Object,SharpDX.DirectWrite.TextRenderer,System.Single,System.Single,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
            The application implemented rendering callback (<see cref="M:SharpDX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffect">The drawing effect set in <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)"/>.  Usually this effect is a foreground brush that  is used in glyph drawing. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObject.GetBreakConditions(SharpDX.DirectWrite.BreakCondition@,SharpDX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObject.Metrics">
            <summary>	
            <see cref="T:SharpDX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <returns>a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObject.OverhangMetrics">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <returns>Overshoot of visible extents (in DIPs) outside the object. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.Draw(System.Object,SharpDX.DirectWrite.TextRenderer,System.Single,System.Single,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
            The application implemented rendering callback (<see cref="M:SharpDX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffect">The drawing effect set in <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)"/>.  Usually this effect is a foreground brush that  is used in glyph drawing. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetBreakConditions(SharpDX.DirectWrite.BreakCondition@,SharpDX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.InlineObjectNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.Draw__(System.IntPtr,System.IntPtr,System.Single,System.Single,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="clientDrawingContext">No documentation.</param>
            <param name="renderer">No documentation.</param>
            <param name="originX">No documentation.</param>
            <param name="originY">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <param name="isRightToLeft">No documentation.</param>
            <param name="clientDrawingEffect">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] void* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetMetrics_(SharpDX.DirectWrite.InlineObjectMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="metrics">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetOverhangMetrics_(SharpDX.DirectWrite.OverhangMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="overhangs">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetBreakConditions_(SharpDX.DirectWrite.BreakCondition@,SharpDX.DirectWrite.BreakCondition@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="breakConditionBefore">No documentation.</param>
            <param name="breakConditionAfter">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectNative.Metrics">
            <summary>	
            <see cref="T:SharpDX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <returns>a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectNative.OverhangMetrics">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <returns>Overshoot of visible extents (in DIPs) outside the object. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.EllipsisTrimming.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.EllipsisTrimming"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:SharpDX.DirectWrite.EllipsisTrimming.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.TextFormat)">
            <summary>	
            Creates an inline object for trimming, using an ellipsis as the omission sign. 	
            </summary>	
            <remarks>	
            The ellipsis will be created using the current settings of the format, including base font, style, and any effects. Alternate omission signs can be created by the application by implementing <see cref="T:SharpDX.DirectWrite.InlineObject"/>.  	
            </remarks>
            <param name="factory">a <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="textFormat">A text format object, created with {{CreateTextFormat}}, used for text layout. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateEllipsisTrimmingSign([None] IDWriteTextFormat* textFormat,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometryGroup">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1GeometryGroup</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Geometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Geometry</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Geometry.DefaultFlatteningTolerance">
            <summary>
            Default flattening tolerance used for all methods that are not explicitly using it. Default is set to 0.25f.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Compare(SharpDX.Direct2D1.Geometry)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:SharpDX.Direct2D1.GeometryRelation.IsContained" /> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:SharpDX.Direct2D1.GeometryRelation" />. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
            <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Compare(SharpDX.Direct2D1.Geometry,System.Single)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:SharpDX.Direct2D1.GeometryRelation.IsContained" /> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:SharpDX.Direct2D1.GeometryRelation" />. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
            <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeArea">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* area)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeArea(System.Single)">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* area)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeLength">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* length)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeLength(System.Single)">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* length)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputePointAtLength(System.Single,System.Drawing.PointF@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([None] float length,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out, Optional] D2D1_POINT_2F* point,[Out, Optional] D2D1_POINT_2F* unitTangentVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputePointAtLength(System.Single,System.Single,System.Drawing.PointF@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([None] float length,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out, Optional] D2D1_POINT_2F* point,[Out, Optional] D2D1_POINT_2F* unitTangentVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.Point)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.PointF)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.Point,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.PointF,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.Point,SharpDX.Direct2D1.Matrix3x2,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment, or NULL. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetBounds">
            <summary>	
            Retrieves the bounds of the geometry.	
            </summary>	
            <returns>When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left &gt; bounds.right. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetBounds([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single,System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="strokeStyle">The style of the stroke that widens the geometry. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline(SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline(System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="worldTransform">The transform to apply to the geometry outline, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify(SharpDX.Direct2D1.GeometrySimplificationOption,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="geometrySink"> The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify(SharpDX.Direct2D1.GeometrySimplificationOption,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink"> The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify(SharpDX.Direct2D1.GeometrySimplificationOption,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink"> The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single,SharpDX.Direct2D1.StrokeStyle,SharpDX.Direct2D1.Matrix3x2)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single,SharpDX.Direct2D1.StrokeStyle,SharpDX.Direct2D1.Matrix3x2)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single,SharpDX.Direct2D1.StrokeStyle,SharpDX.Direct2D1.Matrix3x2,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate(SharpDX.Direct2D1.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink" /> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate(System.Single,SharpDX.Direct2D1.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink"/> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink"/> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Geometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetBounds(System.Nullable{SharpDX.Direct2D1.Matrix3x2})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="worldTransform">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::GetBounds([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="point">No documentation.</param>
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.PointF,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="point">No documentation.</param>
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Compare(SharpDX.Direct2D1.Geometry,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="inputGeometry">No documentation.</param>
            <param name="inputGeometryTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify_(SharpDX.Direct2D1.GeometrySimplificationOption,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="simplificationOption">No documentation.</param>
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <param name="geometrySink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate_(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <param name="tessellationSink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine_(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="inputGeometry">No documentation.</param>
            <param name="combineMode">No documentation.</param>
            <param name="inputGeometryTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <param name="geometrySink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline_(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <param name="geometrySink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeArea(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* area)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeLength(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* length)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputePointAtLength(System.Single,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.Drawing.PointF@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="length">No documentation.</param>
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <param name="unitTangentVector">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([None] float length,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out, Optional] D2D1_POINT_2F* point,[Out, Optional] D2D1_POINT_2F* unitTangentVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen_(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <param name="worldTransform">No documentation.</param>
            <param name="flatteningTolerance">No documentation.</param>
            <param name="geometrySink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Geometry::Widen([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Geometry.FlatteningTolerance">
            <summary>
            Get or set the default flattening tolerance used for all methods that are not explicitly using it. Default is set to 0.25f.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.FillMode,SharpDX.Direct2D1.Geometry[])">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GeometryGroup"/>, which is an object that holds other geometries.	
            </summary>	
            <remarks>	
            Geometry groups are a convenient way to group several geometries simultaneously so all figures of several distinct geometries are concatenated into one. To create a  <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> object, call  the CreateGeometryGroup method on the <see cref="T:SharpDX.Direct2D1.Factory"/> object, passing in the fillMode with possible values of   <see cref="F:SharpDX.Direct2D1.FillMode.Alternate"/> (alternate) and D2D1_FILL_MODE_WINDING, an array of geometry objects to add to the geometry group, and the number of elements in this array. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="fillMode">A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry. </param>
            <param name="geometries">An array containing the geometry objects to add to the geometry group. The number of elements in this array is indicated by the geometriesCount parameter.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometry">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <returns>an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter.</returns>
            <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometry(System.Int32)">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <param name="geometriesCount">A value indicating the number of geometries to return in the geometries array. If this value is less than the number of geometries in the geometry group, the remaining geometries are omitted. If this value is larger than the number of geometries in the geometry group, the extra geometries are set to NULL. To obtain the number of geometries currently in the geometry group, use the {{GetSourceGeometryCount}} method. </param>
            <returns>an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter.</returns>
            <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetFillMode">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_FILL_MODE ID2D1GeometryGroup::GetFillMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometryCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int ID2D1GeometryGroup::GetSourceGeometryCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometries(SharpDX.Direct2D1.Geometry[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="geometries">No documentation.</param>
            <param name="geometriesCount">No documentation.</param>
            <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GeometryGroup.FillMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FILL_MODE ID2D1GeometryGroup::GetFillMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GeometryGroup.SourceGeometryCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ID2D1GeometryGroup::GetSourceGeometryCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ShapingGlyphProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SHAPING_GLYPH_PROPERTIES</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.Justification">
            <summary>	
            Indicates that the glyph has justification applied. 	
            </summary>	
            <unmanaged>short justification</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.Justification_">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short justification</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.IsClusterStart">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isClusterStart</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.IsDiacritic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isDiacritic</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.IsZeroWidthSpace">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isZeroWidthSpace</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.Reserved">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short reserved</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRunAnalysis">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteGlyphRunAnalysis</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.GlyphRun,System.Single,SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run.
            </summary>
            <param name="factory">The factory.</param>
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on).</param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25.</param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline).</param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs.</param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs.</param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs.</param>
            <remarks>
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.
            </remarks>
            <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] DWRITE_RENDERING_MODE renderingMode,[None] DWRITE_MEASURING_MODE measuringMode,[None] float baselineOriginX,[None] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.GlyphRun,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run.
            </summary>
            <param name="factory">The factory.</param>
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on).</param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25.</param>
            <param name="transform">Optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified the emSize and pixelsPerDip.</param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline).</param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs.</param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs.</param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs.</param>
            <remarks>
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.
            </remarks>
            <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] DWRITE_RENDERING_MODE renderingMode,[None] DWRITE_MEASURING_MODE measuringMode,[None] float baselineOriginX,[None] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.GlyphRunAnalysis"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.GetAlphaTextureBounds(SharpDX.DirectWrite.TextureType)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textureType">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGlyphRunAnalysis::GetAlphaTextureBounds([None] DWRITE_TEXTURE_TYPE textureType,[Out] RECT* textureBounds)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.CreateAlphaTexture(SharpDX.DirectWrite.TextureType,SharpDX.Rectangle,System.Byte[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textureType">No documentation.</param>
            <param name="textureBounds">No documentation.</param>
            <param name="alphaValues">No documentation.</param>
            <param name="bufferSize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGlyphRunAnalysis::CreateAlphaTexture([None] DWRITE_TEXTURE_TYPE textureType,[In] const RECT* textureBounds,[Out, Buffer] byte* alphaValues,[None] int bufferSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.GetAlphaBlendParams(SharpDX.DirectWrite.RenderingParams,System.Single@,System.Single@,System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="renderingParams">No documentation.</param>
            <param name="blendGamma">No documentation.</param>
            <param name="blendEnhancedContrast">No documentation.</param>
            <param name="blendClearTypeLevel">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteGlyphRunAnalysis::GetAlphaBlendParams([None] IDWriteRenderingParams* renderingParams,[Out] float* blendGamma,[Out] float* blendEnhancedContrast,[Out] float* blendClearTypeLevel)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TessellationSink">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1TessellationSink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSink.AddTriangles(SharpDX.Direct2D1.Triangle[])">
            <summary>	
            Copies the specified triangles to the sink.  	
            </summary>	
            <param name="triangles">An array of <see cref="T:SharpDX.Direct2D1.Triangle"/> structures that describe the triangles to add to the sink.</param>
            <unmanaged>void AddTriangles([In, Buffer] const D2D1_TRIANGLE* triangles,[None] UINT trianglesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSink.Close">
            <summary>	
             Closes the sink.	
            </summary>	
            <unmanaged>HRESULT Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TessellationSinkNative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1TessellationSink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.TessellationSinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSinkNative.AddTriangles_(SharpDX.Direct2D1.Triangle[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="triangles">No documentation.</param>
            <param name="trianglesCount">No documentation.</param>
            <unmanaged>void ID2D1TessellationSink::AddTriangles([In, Buffer] const D2D1_TRIANGLE* triangles,[None] int trianglesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSinkNative.Close_">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1TessellationSink::Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TessellationSinkCallback">
            <summary>
            Internal TessellationSink Callback
            </summary>
        </member>
        <member name="T:SharpDX.Direct2D1.Bitmap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Bitmap</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Bitmap"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_SIZE_F ID2D1Bitmap::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetPixelSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_SIZE_U ID2D1Bitmap::GetPixelSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetPixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1Bitmap::GetPixelFormat()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetDpi(System.Single@,System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dpiX">No documentation.</param>
            <param name="dpiY">No documentation.</param>
            <unmanaged>void ID2D1Bitmap::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.CopyFromBitmap(System.Nullable{System.Drawing.Point},SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Rectangle})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="destPoint">No documentation.</param>
            <param name="bitmap">No documentation.</param>
            <param name="srcRect">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.CopyFromRenderTarget(System.Nullable{System.Drawing.Point},SharpDX.Direct2D1.RenderTarget,System.Nullable{SharpDX.Rectangle})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="destPoint">No documentation.</param>
            <param name="renderTarget">No documentation.</param>
            <param name="srcRect">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.CopyFromMemory(System.Nullable{SharpDX.Rectangle},System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dstRect">No documentation.</param>
            <param name="srcData">No documentation.</param>
            <param name="pitch">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size,SharpDX.Direct2D1.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size,SharpDX.DataStream,System.Int32)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataStream">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size,SharpDX.DataStream,System.Int32,SharpDX.Direct2D1.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataStream">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">An <see cref="T:SharpDX.Direct2D1.Bitmap"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Direct2D1.BitmapProperties})">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">An <see cref="T:SharpDX.Direct2D1.Bitmap"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:SharpDX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:SharpDX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.DXGI.Surface)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="surface">An <see cref="T:SharpDX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.DXGI.Surface,System.Nullable{SharpDX.Direct2D1.BitmapProperties})">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="surface">An <see cref="T:SharpDX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:SharpDX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:SharpDX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromBitmap(SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="sourceBitmap">The bitmap to copy from. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromBitmap(SharpDX.Direct2D1.Bitmap,System.Drawing.Point)">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="sourceBitmap">The bitmap to copy from. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromBitmap(SharpDX.Direct2D1.Bitmap,System.Drawing.Point,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="sourceBitmap">The bitmap to copy from. </param>
            <param name="sourceArea">The area of bitmap to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.IntPtr,System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="pointer">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.Byte[],System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.IntPtr,System.Int32,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="pointer">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.Byte[],System.Int32,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromRenderTarget(SharpDX.Direct2D1.RenderTarget)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromRenderTarget(SharpDX.Direct2D1.RenderTarget,System.Drawing.Point)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromRenderTarget(SharpDX.Direct2D1.RenderTarget,System.Drawing.Point,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <param name="sourceArea">The area of renderTarget to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromStream(System.IO.Stream,System.Int32,System.Int32)">
            <summary>	
            Copies the specified region from a stream into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="stream">The stream to copy the data from. </param>
            <param name="length">Length in bytes of the data to copy from the stream.</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromStream(System.IO.Stream,System.Int32,System.Int32,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from a stream into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="stream">The stream to copy the data from. </param>
            <param name="length">Length in bytes of the data to copy from the stream.</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_F ID2D1Bitmap::GetSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.PixelSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_U ID2D1Bitmap::GetPixelSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.PixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1Bitmap::GetPixelFormat()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.DotsPerInch">
            <summary>	
            Return the dots per inch (DPI) of the bitmap.	
            </summary>	
            <value>The dots per inch (DPI) of the bitma.</value>
        </member>
        <member name="T:SharpDX.Direct2D1.GradientStopCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1GradientStopCollection</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetGradientStopCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int ID2D1GradientStopCollection::GetGradientStopCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetGradientStops(SharpDX.Direct2D1.GradientStop[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gradientStops">No documentation.</param>
            <param name="gradientStopsCount">No documentation.</param>
            <unmanaged>void ID2D1GradientStopCollection::GetGradientStops([Out, Buffer] D2D1_GRADIENT_STOP* gradientStops,[None] int gradientStopsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetColorInterpolationGamma">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_GAMMA ID2D1GradientStopCollection::GetColorInterpolationGamma()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetExtendMode">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_EXTEND_MODE ID2D1GradientStopCollection::GetExtendMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[])">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, a Gamma StandardRgb, and ExtendMode.Clamp.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[],SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color Gamma.StandardRgb, and extend mode.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[],SharpDX.Direct2D1.Gamma)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and ExtendMode.Clamp.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[],SharpDX.Direct2D1.Gamma,SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and extend mode.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GradientStopCollection.GradientStopCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ID2D1GradientStopCollection::GetGradientStopCount()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GradientStopCollection.ColorInterpolationGamma">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GAMMA ID2D1GradientStopCollection::GetColorInterpolationGamma()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GradientStopCollection.ExtendMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE ID2D1GradientStopCollection::GetExtendMode()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Brush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Brush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Brush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.SetOpacity(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="opacity">No documentation.</param>
            <unmanaged>void ID2D1Brush::SetOpacity([None] float opacity)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.SetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <unmanaged>void ID2D1Brush::SetTransform([In] const D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.GetOpacity">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float ID2D1Brush::GetOpacity()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.GetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <unmanaged>void ID2D1Brush::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Brush.Opacity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ID2D1Brush::GetOpacity()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Brush.Transform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1Brush::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapBrush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1BitmapBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetExtendModeX(SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="extendModeX">No documentation.</param>
            <unmanaged>void ID2D1BitmapBrush::SetExtendModeX([None] D2D1_EXTEND_MODE extendModeX)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetExtendModeY(SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="extendModeY">No documentation.</param>
            <unmanaged>void ID2D1BitmapBrush::SetExtendModeY([None] D2D1_EXTEND_MODE extendModeY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetInterpolationMode(SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="interpolationMode">No documentation.</param>
            <unmanaged>void ID2D1BitmapBrush::SetInterpolationMode([None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetBitmap(SharpDX.Direct2D1.Bitmap)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bitmap">No documentation.</param>
            <unmanaged>void ID2D1BitmapBrush::SetBitmap([In] ID2D1Bitmap* bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetExtendModeX">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeX()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetExtendModeY">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeY()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetInterpolationMode">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE ID2D1BitmapBrush::GetInterpolationMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetBitmap(SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bitmap">No documentation.</param>
            <unmanaged>void ID2D1BitmapBrush::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.BitmapBrushProperties)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.BrushProperties)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Direct2D1.BitmapBrushProperties},System.Nullable{SharpDX.Direct2D1.BrushProperties})">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.ExtendModeX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeX()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.ExtendModeY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeY()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.InterpolationMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE ID2D1BitmapBrush::GetInterpolationMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.Bitmap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1BitmapBrush::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.SolidColorBrush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1SolidColorBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.SetColor(SharpDX.Color4)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="color">No documentation.</param>
            <unmanaged>void ID2D1SolidColorBrush::SetColor([In] const D2D1_COLOR_F* color)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.GetColor">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_COLOR_F ID2D1SolidColorBrush::GetColor()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Color4)">
            <summary>	
            Creates a new <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Color4,System.Nullable{SharpDX.Direct2D1.BrushProperties})">
            <summary>	
            Creates a new <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="brushProperties">The base opacity of the brush.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.SolidColorBrush.Color">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COLOR_F ID2D1SolidColorBrush::GetColor()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LinearGradientBrush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1LinearGradientBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.SetStartPoint(System.Drawing.PointF)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="startPoint">No documentation.</param>
            <unmanaged>void ID2D1LinearGradientBrush::SetStartPoint([None] D2D1_POINT_2F startPoint)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.SetEndPoint(System.Drawing.PointF)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="endPoint">No documentation.</param>
            <unmanaged>void ID2D1LinearGradientBrush::SetEndPoint([None] D2D1_POINT_2F endPoint)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.GetStartPoint">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetStartPoint()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.GetEndPoint">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetEndPoint()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.GetGradientStopCollection(SharpDX.Direct2D1.GradientStopCollection@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gradientStopCollection">No documentation.</param>
            <unmanaged>void ID2D1LinearGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.LinearGradientBrushProperties,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
            <unmanaged>HRESULT CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.LinearGradientBrushProperties,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
            <unmanaged>HRESULT CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.LinearGradientBrush.StartPoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetStartPoint()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.LinearGradientBrush.EndPoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetEndPoint()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.LinearGradientBrush.GradientStopCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1LinearGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RadialGradientBrush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1RadialGradientBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetCenter(System.Drawing.PointF)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="center">No documentation.</param>
            <unmanaged>void ID2D1RadialGradientBrush::SetCenter([None] D2D1_POINT_2F center)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetGradientOriginOffset(System.Drawing.PointF)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gradientOriginOffset">No documentation.</param>
            <unmanaged>void ID2D1RadialGradientBrush::SetGradientOriginOffset([None] D2D1_POINT_2F gradientOriginOffset)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetRadiusX(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="radiusX">No documentation.</param>
            <unmanaged>void ID2D1RadialGradientBrush::SetRadiusX([None] float radiusX)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetRadiusY(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="radiusY">No documentation.</param>
            <unmanaged>void ID2D1RadialGradientBrush::SetRadiusY([None] float radiusY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetCenter">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetCenter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetGradientOriginOffset">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetGradientOriginOffset()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetRadiusX">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusX()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetRadiusY">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusY()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetGradientStopCollection(SharpDX.Direct2D1.GradientStopCollection@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gradientStopCollection">No documentation.</param>
            <unmanaged>void ID2D1RadialGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties@,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties,SharpDX.Direct2D1.BrushProperties,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties@,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.Center">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetCenter()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.GradientOriginOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetGradientOriginOffset()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.RadiusX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusX()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.RadiusY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusY()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.GradientStopCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RadialGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.StrokeStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1StrokeStyle</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetStartCap">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetStartCap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetEndCap">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetEndCap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashCap">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetDashCap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetMiterLimit">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float ID2D1StrokeStyle::GetMiterLimit()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetLineJoin">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_LINE_JOIN ID2D1StrokeStyle::GetLineJoin()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashOffset">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float ID2D1StrokeStyle::GetDashOffset()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashStyle">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_DASH_STYLE ID2D1StrokeStyle::GetDashStyle()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashesCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int ID2D1StrokeStyle::GetDashesCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashes(System.Single[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dashes">No documentation.</param>
            <param name="dashesCount">No documentation.</param>
            <unmanaged>void ID2D1StrokeStyle::GetDashes([Out, Buffer] float* dashes,[None] int dashesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.StrokeStyleProperties)">
            <summary>
            Creates an <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="properties">a definition for this render target</param>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.StrokeStyleProperties,System.Single[])">
            <summary>
            Creates an <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="properties">A structure that describes the stroke's line cap, dash offset, and other details of a stroke.</param>
            <param name="dashes">An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width. </param>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.StartCap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetStartCap()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.EndCap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetEndCap()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashCap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetDashCap()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.MiterLimit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ID2D1StrokeStyle::GetMiterLimit()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.LineJoin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN ID2D1StrokeStyle::GetLineJoin()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ID2D1StrokeStyle::GetDashOffset()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE ID2D1StrokeStyle::GetDashStyle()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashesCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ID2D1StrokeStyle::GetDashesCount()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RectangleGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1RectangleGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RectangleGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RectangleGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RectangleGeometry.GetRectangle(SharpDX.RectangleF@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="rect">No documentation.</param>
            <unmanaged>void ID2D1RectangleGeometry::GetRect([Out] D2D1_RECT_F* rect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RectangleGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.RectangleF)">
            <summary>	
             Creates an <see cref="T:SharpDX.Direct2D1.RectangleGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="rectangle">The coordinates of the rectangle geometry. </param>
        </member>
        <member name="P:SharpDX.Direct2D1.RectangleGeometry.Rectangle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RectangleGeometry::GetRect([Out] D2D1_RECT_F* rect)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RoundedRectangleGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1RoundedRectangleGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RoundedRectangleGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RoundedRectangleGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RoundedRectangleGeometry.GetRoundedRect(SharpDX.Direct2D1.RoundedRect@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="roundedRect">No documentation.</param>
            <unmanaged>void ID2D1RoundedRectangleGeometry::GetRoundedRect([Out] D2D1_ROUNDED_RECT* roundedRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RoundedRectangleGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.RoundedRect)">
            <summary>	
             Creates an <see cref="T:SharpDX.Direct2D1.RoundedRectangleGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="roundedRectangle">The coordinates and corner radii of the rounded rectangle geometry.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.RoundedRectangleGeometry.RoundedRect">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RoundedRectangleGeometry::GetRoundedRect([Out] D2D1_ROUNDED_RECT* roundedRect)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.EllipseGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1EllipseGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.EllipseGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.EllipseGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.EllipseGeometry.GetEllipse(SharpDX.Direct2D1.Ellipse@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="ellipse">No documentation.</param>
            <unmanaged>void ID2D1EllipseGeometry::GetEllipse([Out] D2D1_ELLIPSE* ellipse)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.EllipseGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.Ellipse)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.EllipseGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="ellipse">A value that describes the center point, x-radius, and y-radius of the ellipse geometry.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.EllipseGeometry.Ellipse">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1EllipseGeometry::GetEllipse([Out] D2D1_ELLIPSE* ellipse)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TransformedGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1TransformedGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.GetSourceGeometry(SharpDX.Direct2D1.Geometry@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="sourceGeometry">No documentation.</param>
            <unmanaged>void ID2D1TransformedGeometry::GetSourceGeometry([Out] ID2D1Geometry** sourceGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.GetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <unmanaged>void ID2D1TransformedGeometry::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Matrix3x2)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/>.
            </summary>
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="geometrySource"></param>
            <param name="matrix3X2"></param>
        </member>
        <member name="P:SharpDX.Direct2D1.TransformedGeometry.SourceGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1TransformedGeometry::GetSourceGeometry([Out] ID2D1Geometry** sourceGeometry)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.TransformedGeometry.Transform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1TransformedGeometry::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.SimplifiedGeometrySink">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1SimplifiedGeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.SetFillMode(SharpDX.Direct2D1.FillMode)">
            <summary>	
            Specifies the method used to determine which points are inside the geometry described by this geometry sink  and which points are outside.  	
            </summary>	
            <remarks>	
            The fill mode defaults to D2D1_FILL_MODE_ALTERNATE. To set the fill mode, call SetFillMode before the first call to {{BeginFigure}}. Not doing will put the geometry sink in an error state. 	
            </remarks>	
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
            <unmanaged>void SetFillMode([None] D2D1_FILL_MODE fillMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.SetSegmentFlags(SharpDX.Direct2D1.PathSegment)">
            <summary>	
            Specifies stroke and join options to be applied to new segments added to the geometry sink. 	
            </summary>	
            <remarks>	
            After this method is called, the specified segment flags are applied to each segment subsequently added to the sink. The segment flags are applied to every additional segment until this method is called again and a different set of segment flags is specified.     	
            </remarks>	
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
            <unmanaged>void SetSegmentFlags([None] D2D1_PATH_SEGMENT vertexFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.BeginFigure(System.Drawing.PointF,SharpDX.Direct2D1.FigureBegin)">
            <summary>	
            Starts a new figure at the specified point. 	
            </summary>	
            <remarks>	
            If this method is called while a figure is currently in progress, the interface is invalidated and all future methods will fail.	
            </remarks>	
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
            <unmanaged>void BeginFigure([None] D2D1_POINT_2F startPoint,[None] D2D1_FIGURE_BEGIN figureBegin)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.AddLines(System.Drawing.PointF[])">
            <summary>	
             Creates a sequence of lines using the specified points and adds them to the geometry sink.	
            </summary>	
            <param name="ointsRef">A pointer to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.   </param>
            <unmanaged>void AddLines([In, Buffer] const D2D1_POINT_2F* points,[None] UINT pointsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.AddBeziers(SharpDX.Direct2D1.BezierSegment[])">
            <summary>	
            Creates a sequence of cubic Bezier curves and adds them to the geometry sink. 	
            </summary>	
            <param name="beziers">A pointer to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
            <unmanaged>void AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[None] UINT beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.EndFigure(SharpDX.Direct2D1.FigureEnd)">
            <summary>	
             Ends the current figure; optionally, closes it.	
            </summary>	
            <remarks>	
            Calling this method without a matching call to {{BeginFigure}} places the geometry sink in an error state; subsequent calls are ignored, and the overall failure will be returned when the {{Close}} method is called.	
            </remarks>	
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by {{BeginFigure}}.</param>
            <unmanaged>void EndFigure([None] D2D1_FIGURE_END figureEnd)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.Close">
            <summary>	
            Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state. 	
            </summary>	
            <remarks>	
            Do not close the geometry sink while a figure is still in progress; doing so puts the geometry sink in an error state. For the close operation to be successful, there must be one {{EndFigure}} call for each call to {{BeginFigure}}.After calling this method, the geometry sink might not be usable. Direct2D implementations of this interface do not allow the geometry sink to be modified after it is closed, but other implementations might not impose this restriction.	
            </remarks>	
            <unmanaged>HRESULT Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySink">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1GeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddLine(System.Drawing.PointF)">
            <summary>	
            Creates a line segment between the current point and the specified end point and adds it to the geometry sink. 	
            </summary>	
            <param name="point">The end point of the line to draw.</param>
            <unmanaged>void AddLine([None] D2D1_POINT_2F point)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddBezier(SharpDX.Direct2D1.BezierSegment)">
            <summary>	
             Creates  a cubic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control points and endpoint of the Bezier curve to add. </param>
            <unmanaged>void AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddQuadraticBezier(SharpDX.Direct2D1.QuadraticBezierSegment)">
            <summary>	
            Creates  a quadratic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control point and the endpoint of the quadratic Bezier curve to add.</param>
            <unmanaged>void AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddQuadraticBeziers(SharpDX.Direct2D1.QuadraticBezierSegment[])">
            <summary>	
            Adds a sequence of quadratic Bezier segments as an array in a single call.	
            </summary>	
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
            <unmanaged>void AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[None] UINT beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddArc(SharpDX.Direct2D1.ArcSegment)">
            <summary>	
            Adds a single arc to the path geometry.	
            </summary>	
            <param name="arc">The arc segment to add to the figure.</param>
            <unmanaged>void AddArc([In] const D2D1_ARC_SEGMENT* arc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PathGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1PathGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.PathGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.Open">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1PathGeometry::Open([Out] ID2D1GeometrySink** geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.Stream_(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="geometrySink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1PathGeometry::Stream([In] ID2D1GeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.GetSegmentCount(System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="count">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1PathGeometry::GetSegmentCount([Out] int* count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.GetFigureCount(System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="count">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1PathGeometry::GetFigureCount([Out] int* count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.#ctor(SharpDX.Direct2D1.Factory)">
            <summary>	
            Creates an empty <see cref="T:SharpDX.Direct2D1.PathGeometry"/>.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.Stream(SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Copies the contents of the path geometry to the specified <see cref="T:SharpDX.Direct2D1.GeometrySink"/>.	
            </summary>	
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Stream([In] ID2D1GeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.PathGeometry.SegmentCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT ID2D1PathGeometry::GetSegmentCount([Out] int* count)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.PathGeometry.FigureCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT ID2D1PathGeometry::GetFigureCount([Out] int* count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Layer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Layer</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Layer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.GetSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_SIZE_F ID2D1Layer::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.#ctor(SharpDX.Direct2D1.RenderTarget)">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size. The layer resource is allocated to the minimum size when {{PushLayer}} is called.
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <unmanaged>HRESULT CreateLayer([In, Optional] const D2D1_SIZE_F* size,[Out] ID2D1Layer** layer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.#ctor(SharpDX.Direct2D1.RenderTarget,System.Nullable{System.Drawing.SizeF})">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size.  	
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when {{PushLayer}} is called.</param>
            <unmanaged>HRESULT CreateLayer([In, Optional] const D2D1_SIZE_F* size,[Out] ID2D1Layer** layer)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Layer.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_F ID2D1Layer::GetSize()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DrawingStateBlock">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1DrawingStateBlock</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.GetDescription(SharpDX.Direct2D1.DrawingStateDescription@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="stateDescription">No documentation.</param>
            <unmanaged>void ID2D1DrawingStateBlock::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.SetDescription(SharpDX.Direct2D1.DrawingStateDescription@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="stateDescription">No documentation.</param>
            <unmanaged>void ID2D1DrawingStateBlock::SetDescription([In] const D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.SetTextRenderingParams(SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textRenderingParams">No documentation.</param>
            <unmanaged>void ID2D1DrawingStateBlock::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.GetTextRenderingParams(SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textRenderingParams">No documentation.</param>
            <unmanaged>void ID2D1DrawingStateBlock::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.DrawingStateDescription)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory,SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory,System.Nullable{SharpDX.Direct2D1.DrawingStateDescription},SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="P:SharpDX.Direct2D1.DrawingStateBlock.Description">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1DrawingStateBlock::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.DrawingStateBlock.TextRenderingParams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1DrawingStateBlock::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1RenderTarget</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTarget.DefaultStrokeWidth">
            <summary>
            Default stroke width used for all methods that are not explicitly using it. Default is set to 1.0f.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateBitmap(System.Drawing.Size,System.IntPtr,System.Int32,SharpDX.Direct2D1.BitmapProperties,SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="size">No documentation.</param>
            <param name="srcData">No documentation.</param>
            <param name="pitch">No documentation.</param>
            <param name="bitmapProperties">No documentation.</param>
            <param name="bitmap">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] int pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateSharedBitmap(System.Guid,System.IntPtr,System.Nullable{SharpDX.Direct2D1.BitmapProperties},SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="riid">No documentation.</param>
            <param name="data">No documentation.</param>
            <param name="bitmapProperties">No documentation.</param>
            <param name="bitmap">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateSharedBitmap([In] GUID* riid,[In] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateBitmapBrush(SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Direct2D1.BitmapBrushProperties},System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.BitmapBrush@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bitmap">No documentation.</param>
            <param name="bitmapBrushProperties">No documentation.</param>
            <param name="brushProperties">No documentation.</param>
            <param name="bitmapBrush">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateSolidColorBrush(SharpDX.Color4,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.SolidColorBrush@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="color">No documentation.</param>
            <param name="brushProperties">No documentation.</param>
            <param name="solidColorBrush">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateSolidColorBrush([In] const D2D1_COLOR_F* color,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1SolidColorBrush** solidColorBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateGradientStopCollection(SharpDX.Direct2D1.GradientStop[],System.Int32,SharpDX.Direct2D1.Gamma,SharpDX.Direct2D1.ExtendMode,SharpDX.Direct2D1.GradientStopCollection@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gradientStops">No documentation.</param>
            <param name="gradientStopsCount">No documentation.</param>
            <param name="colorInterpolationGamma">No documentation.</param>
            <param name="extendMode">No documentation.</param>
            <param name="gradientStopCollection">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] int gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateLinearGradientBrush(SharpDX.Direct2D1.LinearGradientBrushProperties,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection,SharpDX.Direct2D1.LinearGradientBrush@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="linearGradientBrushProperties">No documentation.</param>
            <param name="brushProperties">No documentation.</param>
            <param name="gradientStopCollection">No documentation.</param>
            <param name="linearGradientBrush">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateRadialGradientBrush(SharpDX.Direct2D1.RadialGradientBrushProperties@,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection,SharpDX.Direct2D1.RadialGradientBrush@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="radialGradientBrushProperties">No documentation.</param>
            <param name="brushProperties">No documentation.</param>
            <param name="gradientStopCollection">No documentation.</param>
            <param name="radialGradientBrush">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateCompatibleRenderTarget(System.Nullable{System.Drawing.SizeF},System.Nullable{System.Drawing.Size},System.Nullable{SharpDX.Direct2D1.PixelFormat},SharpDX.Direct2D1.CompatibleRenderTargetOptions,SharpDX.Direct2D1.BitmapRenderTarget@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="desiredSize">No documentation.</param>
            <param name="desiredPixelSize">No documentation.</param>
            <param name="desiredFormat">No documentation.</param>
            <param name="options">No documentation.</param>
            <param name="bitmapRenderTarget">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateLayer(System.Nullable{System.Drawing.SizeF},SharpDX.Direct2D1.Layer@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="size">No documentation.</param>
            <param name="layer">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateLayer([In, Optional] const D2D1_SIZE_F* size,[Out] ID2D1Layer** layer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateMesh(SharpDX.Direct2D1.Mesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="mesh">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateMesh([Out] ID2D1Mesh** mesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawLine(System.Drawing.PointF,System.Drawing.PointF,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="point0">No documentation.</param>
            <param name="point1">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawLine([None] D2D1_POINT_2F point0,[None] D2D1_POINT_2F point1,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="rect">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="rect">No documentation.</param>
            <param name="brush">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::FillRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect@,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="roundedRect">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillRoundedRectangle(SharpDX.Direct2D1.RoundedRect@,SharpDX.Direct2D1.Brush)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="roundedRect">No documentation.</param>
            <param name="brush">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::FillRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="ellipse">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="ellipse">No documentation.</param>
            <param name="brush">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::FillEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="geometry">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="strokeWidth">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.Brush)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="geometry">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="opacityBrush">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillMesh(SharpDX.Direct2D1.Mesh,SharpDX.Direct2D1.Brush)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="mesh">No documentation.</param>
            <param name="brush">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillOpacityMask(SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.OpacityMaskContent,System.Nullable{SharpDX.RectangleF},System.Nullable{SharpDX.RectangleF})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="opacityMask">No documentation.</param>
            <param name="brush">No documentation.</param>
            <param name="content">No documentation.</param>
            <param name="destinationRectangle">No documentation.</param>
            <param name="sourceRectangle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[None] D2D1_OPACITY_MASK_CONTENT content,[In, Optional] const D2D1_RECT_F* destinationRectangle,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.RectangleF},System.Single,SharpDX.Direct2D1.BitmapInterpolationMode,System.Nullable{SharpDX.RectangleF})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bitmap">No documentation.</param>
            <param name="destinationRectangle">No documentation.</param>
            <param name="opacity">No documentation.</param>
            <param name="interpolationMode">No documentation.</param>
            <param name="sourceRectangle">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions,SharpDX.DirectWrite.MeasuringMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="text">No documentation.</param>
            <param name="stringLength">No documentation.</param>
            <param name="textFormat">No documentation.</param>
            <param name="layoutRect">No documentation.</param>
            <param name="defaultForegroundBrush">No documentation.</param>
            <param name="options">No documentation.</param>
            <param name="measuringMode">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="origin">No documentation.</param>
            <param name="textLayout">No documentation.</param>
            <param name="defaultForegroundBrush">No documentation.</param>
            <param name="options">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawTextLayout([None] D2D1_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGlyphRun(System.Drawing.PointF,SharpDX.DirectWrite.GlyphRun@,SharpDX.Direct2D1.Brush,SharpDX.DirectWrite.MeasuringMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="baselineOrigin">No documentation.</param>
            <param name="glyphRun">No documentation.</param>
            <param name="foregroundBrush">No documentation.</param>
            <param name="measuringMode">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::DrawGlyphRun([None] D2D1_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] ID2D1Brush* foregroundBrush,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SetTransform([In] const D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetAntialiasMode(SharpDX.Direct2D1.AntialiasMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="antialiasMode">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SetAntialiasMode([None] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetAntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_ANTIALIAS_MODE ID2D1RenderTarget::GetAntialiasMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTextAntialiasMode(SharpDX.Direct2D1.TextAntialiasMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textAntialiasMode">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SetTextAntialiasMode([None] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTextAntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE ID2D1RenderTarget::GetTextAntialiasMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTextRenderingParams(SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textRenderingParams">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTextRenderingParams(SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textRenderingParams">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTags(System.Int64,System.Int64)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="tag1">No documentation.</param>
            <param name="tag2">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SetTags([None] D2D1_TAG tag1,[None] D2D1_TAG tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTags(System.Int64@,System.Int64@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="tag1">No documentation.</param>
            <param name="tag2">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::GetTags([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PushLayer(SharpDX.Direct2D1.LayerParameters@,SharpDX.Direct2D1.Layer)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="layerParameters">No documentation.</param>
            <param name="layer">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::PushLayer([In] const D2D1_LAYER_PARAMETERS* layerParameters,[In] ID2D1Layer* layer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PopLayer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RenderTarget::PopLayer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="tag1">No documentation.</param>
            <param name="tag2">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::Flush([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SaveDrawingState(SharpDX.Direct2D1.DrawingStateBlock)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="drawingStateBlock">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SaveDrawingState([InOut] ID2D1DrawingStateBlock* drawingStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.RestoreDrawingState(SharpDX.Direct2D1.DrawingStateBlock)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="drawingStateBlock">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::RestoreDrawingState([In] ID2D1DrawingStateBlock* drawingStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PushAxisAlignedClip(SharpDX.RectangleF,SharpDX.Direct2D1.AntialiasMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="clipRect">No documentation.</param>
            <param name="antialiasMode">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::PushAxisAlignedClip([In] const D2D1_RECT_F* clipRect,[None] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PopAxisAlignedClip">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RenderTarget::PopAxisAlignedClip()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.Clear(System.Nullable{SharpDX.Color4})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="clearColor">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::Clear([In, Optional] const D2D1_COLOR_F* clearColor)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.BeginDraw">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RenderTarget::BeginDraw()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="tag1">No documentation.</param>
            <param name="tag2">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1RenderTarget::EndDraw([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetPixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1RenderTarget::GetPixelFormat()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetDpi(System.Single,System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dpiX">No documentation.</param>
            <param name="dpiY">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::SetDpi([None] float dpiX,[None] float dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetDpi(System.Single@,System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dpiX">No documentation.</param>
            <param name="dpiY">No documentation.</param>
            <unmanaged>void ID2D1RenderTarget::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_SIZE_F ID2D1RenderTarget::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetPixelSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_SIZE_U ID2D1RenderTarget::GetPixelSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetMaximumBitmapSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int ID2D1RenderTarget::GetMaximumBitmapSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.IsSupported(SharpDX.Direct2D1.RenderTargetProperties@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="renderTargetProperties">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>BOOL ID2D1RenderTarget::IsSupported([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.#ctor(SharpDX.Direct2D1.Factory,SharpDX.DXGI.Surface,SharpDX.Direct2D1.RenderTargetProperties)">
            <summary>	
            Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. 	
            </summary>	
            <remarks>	
            To write to a Direct3D surface, you obtain an <see cref="T:SharpDX.DXGI.Surface"/> and pass it to the {{CreateDxgiSurfaceRenderTarget}} method to create a DXGI surface render target; you can then use the DXGI surface render target to draw 2-D content to the DXGI surface.  A DXGI surface render target is a type of <see cref="T:SharpDX.Direct2D1.RenderTarget"/>. Like other Direct2D render targets, you can use it to create resources and issue drawing commands. The DXGI surface render target and the DXGI surface must use the same DXGI format. If you specify the {{DXGI_FORMAT_UNKOWN}} format when you create the render target, it will automatically use the surface's format.The DXGI surface render target does not perform DXGI surface synchronization. To work with Direct2D, the Direct3D device that provides the <see cref="T:SharpDX.DXGI.Surface"/> must be created with the D3D10_CREATE_DEVICE_BGRA_SUPPORT flag.For more information about creating and using DXGI surface render targets, see the {{Direct2D and Direct3D Interoperability Overview}}.When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the render target's {{EndDraw}} method returns the {{D2DERR_RECREATE_TARGET}} error. When you receive this error, you need to recreate the render target (and any resources it created). 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="dxgiSurface">The dxgi surface to bind this render target to</param>
            <param name="properties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear" />.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,SharpDX.RectangleF,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush"/> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn; NULL to draw the selected portion of the bitmap at the origin of the render target.  If the rectangle is specified but not well-ordered, nothing is drawn, but the render target does not enter an error state. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/>.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode,SharpDX.RectangleF)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/>.  </param>
            <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn; NULL to draw the entire bitmap.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of the specified ellipse using the specified stroke style. 	
            </summary>	
            <remarks>	
            The {{DrawEllipse}} method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawEllipse) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the ellipse's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of the specified ellipse using the specified stroke style. 	
            </summary>	
            <remarks>	
            The {{DrawEllipse}} method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawEllipse) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the ellipse's outline. </param>
            <param name="strokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of the specified geometry. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="geometry">The geometry to draw. </param>
            <param name="brush">The brush used to paint the geometry's stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of the specified geometry. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="geometry">The geometry to draw. </param>
            <param name="brush">The brush used to paint the geometry's stroke. </param>
            <param name="strokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawLine(System.Drawing.PointF,System.Drawing.PointF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws a line between the specified points. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawLine) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="point0">The start point of the line, in device-independent pixels. </param>
            <param name="point1">The end point of the line, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the line's stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawLine([None] D2D1_POINT_2F point0,[None] D2D1_POINT_2F point1,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawLine(System.Drawing.PointF,System.Drawing.PointF,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws a line between the specified points. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawLine) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="point0">The start point of the line, in device-independent pixels. </param>
            <param name="point1">The end point of the line, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the line's stroke. </param>
            <param name="strokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f.  The stroke is centered on the line. </param>
            <unmanaged>void ID2D1RenderTarget::DrawLine([None] D2D1_POINT_2F point0,[None] D2D1_POINT_2F point1,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of a rectangle that has the specified dimensions. 	
            </summary>	
            <remarks>	
            When this method fails, it does not return an error code. To determine whether a drawing method (such as {{DrawRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> method.  	
            </remarks>	
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rectangle's stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of a rectangle that has the specified dimensions and stroke style. 	
            </summary>	
            <remarks>	
            When this method fails, it does not return an error code. To determine whether a drawing method (such as {{DrawRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> method.  	
            </remarks>	
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rectangle's stroke. </param>
            <param name="strokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <param name="strokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws the outline of the specified rounded rectangle using the specified stroke style.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <param name="strokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.  </param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object, create an <see cref="T:SharpDX.DirectWrite.Factory" /> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object, create an <see cref="T:SharpDX.DirectWrite.Factory" /> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:SharpDX.Direct2D1.DrawTextOptions.None" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions,SharpDX.DirectWrite.MeasuringMode)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object, create an <see cref="T:SharpDX.DirectWrite.Factory" /> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:SharpDX.Direct2D1.DrawTextOptions.None" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is DWRITE_MEASURING_MODE_NATURAL.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the formatted text described by the specified <see cref="T:SharpDX.DirectWrite.TextLayout" /> object.	
            </summary>	
            <remarks>	
            When drawing the same text repeatedly, using the DrawTextLayout method is more efficient than using the {{DrawText}} method because the text doesn't need to be formatted and the layout processed with each call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawTextLayout) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="origin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn. </param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from <see cref="T:SharpDX.Direct2D1.Resource" /> are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.  </param>
            <param name="defaultForegroundBrush">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)" /> method).  </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextLayout([None] D2D1_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.EndDraw">
            <summary>	
            Ends drawing operations  on the render target and indicates the current error state and associated tags. 	
            </summary>	
            <remarks>	
            Drawing operations can only be issued between a {{BeginDraw}} and EndDraw call.BeginDraw and EndDraw are use to indicate that a render target is in use by the Direct2D system. Different implementations of <see cref="T:SharpDX.Direct2D1.RenderTarget"/> might behave differently when {{BeginDraw}} is called. An <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> may be locked between BeginDraw/EndDraw calls, a DXGI surface render target might be acquired on BeginDraw and released on EndDraw, while an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> may begin batching at BeginDraw and may present on EndDraw, for example. The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of {{BeginDraw}}/EndDraw. After {{BeginDraw}} is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the {{Flush}} method is called, or until EndDraw is called. The EndDraw method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The EndDraw method always succeeds: it should not be called twice even if a previous EndDraw resulted in a failing HRESULT. If EndDraw is called without a matched call to {{BeginDraw}}, it returns an error indicating that BeginDraw must be called before EndDraw. Calling BeginDraw twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when EndDraw is called.	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code and sets tag1 and tag2 to the tags that were active when the error occurred. </returns>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified geometry. 	
            </summary>	
            <remarks>	
            If the opacityBrush parameter is not NULL, the alpha value of each pixel of the mapped opacityBrush is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored.  The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by brush.  	
            When this method fails, it does not return an error code. To determine whether a drawing operation (such as FillGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush"/> method. 	
            </remarks>	
            <param name="geometry">The geometry to paint.</param>
            <param name="brush">The brush used to paint the geometry's interior.</param>
            <unmanaged>void FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillOpacityMask(SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.OpacityMaskContent)">
            <summary>	
            Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.    	
            </summary>	
            <remarks>	
            For this method to work properly, the render target must be using the <see cref="F:SharpDX.Direct2D1.AntialiasMode.Aliased" /> antialiasing mode. You can set the antialiasing mode by calling the <see cref="M:SharpDX.Direct2D1.RenderTarget.SetAntialiasMode(SharpDX.Direct2D1.AntialiasMode)" /> method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillOpacityMask}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="opacityMask">The opacity mask to apply to the brush. The alpha value of each pixel in the  region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. </param>
            <param name="brush">The brush used to paint the region of the render target specified by destinationRectangle. </param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. </param>
            <unmanaged>void ID2D1RenderTarget::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[None] D2D1_OPACITY_MASK_CONTENT content,[In, Optional] const D2D1_RECT_F* destinationRectangle,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to paint, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the interior of the rounded rectangle. </param>
            <unmanaged>void ID2D1RenderTarget::FillRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.Flush">
            <summary>	
            Executes all pending drawing commands. 	
            </summary>	
            <remarks>	
            This command does not flush the device that is associated with the render target.   Calling this method resets the error state of the render target. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code and sets tag1 and tag2 to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0). </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::Flush([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.Transform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RenderTarget::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.AntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE ID2D1RenderTarget::GetAntialiasMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.TextAntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE ID2D1RenderTarget::GetTextAntialiasMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.TextRenderingParams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID2D1RenderTarget::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.PixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1RenderTarget::GetPixelFormat()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_F ID2D1RenderTarget::GetSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.PixelSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_U ID2D1RenderTarget::GetPixelSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.MaximumBitmapSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ID2D1RenderTarget::GetMaximumBitmapSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.StrokeWidth">
            <summary>
            Get or set the default stroke width used for all methods that are not explicitly using it. Default is set to 1.0f.
            </summary>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.DotsPerInch">
            <summary>	
            Get or sets the dots per inch (DPI) of the render target. 	
            </summary>	
            <remarks>	
            This method specifies the mapping from pixel space to device-independent space  for the render target.  If both dpiX and dpiY are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed. For <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.   	
            </remarks>	
            <unmanaged>void ID2D1RenderTarget::SetDpi([None] float dpiX,[None] float dpiY)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapRenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1BitmapRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.GetBitmap(SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bitmap">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1BitmapRenderTarget::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions)">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render targe with same size, pixel size and pixel format.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions,System.Drawing.SizeF)">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target with same pixel size and pixel format.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions,System.Nullable{SharpDX.Direct2D1.PixelFormat})">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target with same size and pixel size.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:SharpDX.Direct2D1.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions,System.Nullable{System.Drawing.SizeF},System.Nullable{System.Drawing.Size},System.Nullable{SharpDX.Direct2D1.PixelFormat})">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.	
            </summary>	
            <remarks>	
            The pixel size and DPI of the new render target can be altered by specifying values for desiredSize or desiredPixelSize:  If desiredSize is specified but desiredPixelSize is not, the pixel size is computed from the desired size using the parent target DPI. If the desiredSize maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target.  If desiredSize maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (desiredSize.width, desiredSize.height) maps to the lower-right corner of the compatible render target.If the desiredPixelSize is specified and desiredSize is not, the DPI of the new render target is the same as the original render target.If both desiredSize and desiredPixelSize are specified, the DPI of the new render target is computed to account for the difference in scale.If neither desiredSize nor desiredPixelSize is specified, the new render target size and DPI match the original render target. 	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:SharpDX.Direct2D1.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapRenderTarget.Bitmap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT ID2D1BitmapRenderTarget::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.WindowRenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1HwndRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.CheckWindowState">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>D2D1_WINDOW_STATE ID2D1HwndRenderTarget::CheckWindowState()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.Resize(System.Drawing.Size)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="ixelSizeRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1HwndRenderTarget::Resize([In] const D2D1_SIZE_U* pixelSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.GetHwnd">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>void* ID2D1HwndRenderTarget::GetHwnd()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.RenderTargetProperties,SharpDX.Direct2D1.HwndRenderTargetProperties)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, a render target that renders to a window.	
            </summary>	
            <remarks>	
            When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the {{D2DERR_RECREATE_TARGET}} error is received. When you receive this error, you need to recreate the render target (and any resources it created).	
            </remarks>
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="hwndProperties">The window handle, initial size (in pixels), and present options.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.WindowRenderTarget.Hwnd">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void* ID2D1HwndRenderTarget::GetHwnd()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GdiInteropRenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1GdiInteropRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GdiInteropRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.GetDC(SharpDX.Direct2D1.DeviceContextInitializeMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="mode">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::GetDC([None] D2D1_DC_INITIALIZE_MODE mode,[Out] void** hdc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.ReleaseDC(System.Nullable{SharpDX.Rectangle})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="update">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::ReleaseDC([In, Optional] const RECT* update)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.ReleaseDC">
            <summary>	
            Indicates that drawing with the device context retrieved using the {{GetDC}} method is finished.  	
            </summary>	
            <remarks>	
            ReleaseDC must be called once for each call to {{GetDC}}. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::ReleaseDC([In, Optional] const RECT* update)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DeviceContextRenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1DCRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DeviceContextRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.DeviceContextRenderTarget.BindDeviceContext(System.IntPtr,SharpDX.Rectangle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="hDC">No documentation.</param>
            <param name="subRectRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1DCRenderTarget::BindDC([In] const void* hDC,[In] const RECT* pSubRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DeviceContextRenderTarget.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.RenderTargetProperties)">
            <summary>	
            Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.	
            </summary>	
            <remarks>	
            Before you can render with a DC render target, you must use the render target's {{BindDC}} method to associate it with a GDI DC.  Do this for each different DC and whenever there is a change in the size of the area you want to draw to.To enable the DC render target to work with GDI, set the render target's DXGI format to <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> and alpha mode to <see cref="F:SharpDX.Direct2D1.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE.Your application should create render targets once and hold on to them for the life of the application or until the render target's  {{EndDraw}} method returns the {{D2DERR_RECREATE_TARGET}} error. When you receive this error, recreate the render target (and any resources it created).	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="properties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.  To enable the device context (DC) render target to work with GDI, set the DXGI format to <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> and the alpha mode to <see cref="F:SharpDX.Direct2D1.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE. For more information about pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
        </member>
        <member name="T:SharpDX.Direct2D1.Factory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Factory</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.ReloadSystemMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::ReloadSystemMetrics()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.GetDesktopDpi(System.Single@,System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dpiX">No documentation.</param>
            <param name="dpiY">No documentation.</param>
            <unmanaged>void ID2D1Factory::GetDesktopDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateRectangleGeometry(SharpDX.RectangleF,SharpDX.Direct2D1.RectangleGeometry@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="rectangle">No documentation.</param>
            <param name="rectangleGeometry">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateRectangleGeometry([In] const D2D1_RECT_F* rectangle,[Out] ID2D1RectangleGeometry** rectangleGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateRoundedRectangleGeometry(SharpDX.Direct2D1.RoundedRect@,SharpDX.Direct2D1.RoundedRectangleGeometry@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="roundedRectangle">No documentation.</param>
            <param name="roundedRectangleGeometry">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateRoundedRectangleGeometry([In] const D2D1_ROUNDED_RECT* roundedRectangle,[Out] ID2D1RoundedRectangleGeometry** roundedRectangleGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateEllipseGeometry(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.EllipseGeometry@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="ellipse">No documentation.</param>
            <param name="ellipseGeometry">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateEllipseGeometry([In] const D2D1_ELLIPSE* ellipse,[Out] ID2D1EllipseGeometry** ellipseGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateGeometryGroup(SharpDX.Direct2D1.FillMode,SharpDX.Direct2D1.Geometry[],System.Int32,SharpDX.Direct2D1.GeometryGroup@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fillMode">No documentation.</param>
            <param name="geometries">No documentation.</param>
            <param name="geometriesCount">No documentation.</param>
            <param name="geometryGroup">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateGeometryGroup([None] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount,[Out] ID2D1GeometryGroup** geometryGroup)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateTransformedGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Matrix3x2@,SharpDX.Direct2D1.TransformedGeometry@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="sourceGeometry">No documentation.</param>
            <param name="transform">No documentation.</param>
            <param name="transformedGeometry">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateTransformedGeometry([In] ID2D1Geometry* sourceGeometry,[In] const D2D1_MATRIX_3X2_F* transform,[Out] ID2D1TransformedGeometry** transformedGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreatePathGeometry(SharpDX.Direct2D1.PathGeometry@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="athGeometryRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreatePathGeometry([Out] ID2D1PathGeometry** pathGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateStrokeStyle(SharpDX.Direct2D1.StrokeStyleProperties@,System.Single[],System.Int32,SharpDX.Direct2D1.StrokeStyle@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="strokeStyleProperties">No documentation.</param>
            <param name="dashes">No documentation.</param>
            <param name="dashesCount">No documentation.</param>
            <param name="strokeStyle">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[None] int dashesCount,[Out] ID2D1StrokeStyle** strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateDrawingStateBlock(System.Nullable{SharpDX.Direct2D1.DrawingStateDescription},SharpDX.DirectWrite.RenderingParams,SharpDX.Direct2D1.DrawingStateBlock@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="drawingStateDescription">No documentation.</param>
            <param name="textRenderingParams">No documentation.</param>
            <param name="drawingStateBlock">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateDrawingStateBlock([In, Optional] const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription,[In, Optional] IDWriteRenderingParams* textRenderingParams,[Out] ID2D1DrawingStateBlock** drawingStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateHwndRenderTarget(SharpDX.Direct2D1.RenderTargetProperties@,SharpDX.Direct2D1.HwndRenderTargetProperties@,SharpDX.Direct2D1.WindowRenderTarget@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="renderTargetProperties">No documentation.</param>
            <param name="hwndRenderTargetProperties">No documentation.</param>
            <param name="hwndRenderTarget">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateHwndRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[In] const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties,[Out] ID2D1HwndRenderTarget** hwndRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateDxgiSurfaceRenderTarget(SharpDX.DXGI.Surface,SharpDX.Direct2D1.RenderTargetProperties@,SharpDX.Direct2D1.RenderTarget@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="dxgiSurface">No documentation.</param>
            <param name="renderTargetProperties">No documentation.</param>
            <param name="renderTarget">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateDxgiSurfaceRenderTarget([In] IDXGISurface* dxgiSurface,[In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out] ID2D1RenderTarget** renderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateDCRenderTarget(SharpDX.Direct2D1.RenderTargetProperties@,SharpDX.Direct2D1.DeviceContextRenderTarget@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="renderTargetProperties">No documentation.</param>
            <param name="dcRenderTarget">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1Factory::CreateDCRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out] ID2D1DCRenderTarget** dcRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor(SharpDX.Direct2D1.FactoryType)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor(SharpDX.Direct2D1.FactoryType,SharpDX.Direct2D1.DebugLevel)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Direct2D1.Factory.DesktopDpi">
            <summary>	
            Retrieves the current desktop dots per inch (DPI). To refresh this value, call {{ReloadSystemMetrics}}.	
            </summary>	
            <remarks>	
            Use this method to obtain the system DPI when setting physical pixel values, such as when you specify the size of a window. 	
            </remarks>	
        </member>
        <member name="T:SharpDX.Direct2D1.SimplifiedGeometrySinkNative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1SimplifiedGeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.SetFillMode_(SharpDX.Direct2D1.FillMode)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fillMode">No documentation.</param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::SetFillMode([None] D2D1_FILL_MODE fillMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.SetSegmentFlags_(SharpDX.Direct2D1.PathSegment)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="vertexFlags">No documentation.</param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::SetSegmentFlags([None] D2D1_PATH_SEGMENT vertexFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.BeginFigure_(System.Drawing.PointF,SharpDX.Direct2D1.FigureBegin)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="startPoint">No documentation.</param>
            <param name="figureBegin">No documentation.</param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::BeginFigure([None] D2D1_POINT_2F startPoint,[None] D2D1_FIGURE_BEGIN figureBegin)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.AddLines_(System.Drawing.PointF[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="ointsRef">No documentation.</param>
            <param name="pointsCount">No documentation.</param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::AddLines([In, Buffer] const D2D1_POINT_2F* points,[None] int pointsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.AddBeziers_(SharpDX.Direct2D1.BezierSegment[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="beziers">No documentation.</param>
            <param name="beziersCount">No documentation.</param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[None] int beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.EndFigure_(SharpDX.Direct2D1.FigureEnd)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="figureEnd">No documentation.</param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::EndFigure([None] D2D1_FIGURE_END figureEnd)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.Close_">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID2D1SimplifiedGeometrySink::Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySinkNative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1GeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GeometrySinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddLine_(System.Drawing.PointF)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="point">No documentation.</param>
            <unmanaged>void ID2D1GeometrySink::AddLine([None] D2D1_POINT_2F point)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddBezier_(SharpDX.Direct2D1.BezierSegment@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bezier">No documentation.</param>
            <unmanaged>void ID2D1GeometrySink::AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddQuadraticBezier_(SharpDX.Direct2D1.QuadraticBezierSegment)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="bezier">No documentation.</param>
            <unmanaged>void ID2D1GeometrySink::AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddQuadraticBeziers_(SharpDX.Direct2D1.QuadraticBezierSegment[],System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="beziers">No documentation.</param>
            <param name="beziersCount">No documentation.</param>
            <unmanaged>void ID2D1GeometrySink::AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[None] int beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddArc_(SharpDX.Direct2D1.ArcSegment@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="arc">No documentation.</param>
            <unmanaged>void ID2D1GeometrySink::AddArc([In] const D2D1_ARC_SEGMENT* arc)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LocalizedStrings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteLocalizedStrings</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetLocaleName(System.Int32)">
            <summary>	
            Get the locale name from the language.	
            </summary>	
            <param name="index">Zero-based index of the locale name to be retrieved. </param>
            <returns>The locale name from the language </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([None] int index,[Out, Buffer] wchar_t* localeName,[None] int size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetString(System.Int32)">
            <summary>	
            Get the string from the language/string pair.
            </summary>	
            <param name="index">Zero-based index of the string from the language/string pair to be retrieved. </param>
            <returns>The locale name from the language </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([None] int index,[Out, Buffer] wchar_t* localeName,[None] int size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.LocalizedStrings"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteLocalizedStrings::GetCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.FindLocaleName(System.String,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="localeName">No documentation.</param>
            <param name="index">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::FindLocaleName([In] const wchar_t* localeName,[Out] int* index,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetLocaleNameLength(System.Int32,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="index">No documentation.</param>
            <param name="length">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleNameLength([None] int index,[Out] int* length)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetLocaleName(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="index">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="size">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([None] int index,[Out, Buffer] wchar_t* localeName,[None] int size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetStringLength(System.Int32,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="index">No documentation.</param>
            <param name="length">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetStringLength([None] int index,[Out] int* length)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetString(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="index">No documentation.</param>
            <param name="stringBuffer">No documentation.</param>
            <param name="size">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetString([None] int index,[Out, Buffer] wchar_t* stringBuffer,[None] int size)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LocalizedStrings.Count">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int IDWriteLocalizedStrings::GetCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollectionLoaderCallback">
            <summary>
            Internal FontCollectionLoader Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollectionLoaderCallback.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontCollectionLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontCollectionLoaderCallback"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontCollectionLoaderCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollectionLoaderCallback.CreateEnumeratorFromKeyDelegate">
            <unmanaged>HRESULT IDWriteFontCollectionLoader::CreateEnumeratorFromKey([None] IDWriteFactory* factory,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontFileEnumerator** fontFileEnumerator)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Factory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFactory</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.#ctor">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.#ctor(SharpDX.DirectWrite.FactoryType)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontCollectionLoader(SharpDX.DirectWrite.FontCollectionLoader)">
            <summary>	
            Registers a custom font collection loader with the factory object. 	
            </summary>	
            <remarks>	
            This function registers a font collection loader with DirectWrite. The font collection loader interface, which should be implemented by a singleton object, handles enumerating font files in a font collection given a particular type of key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation. 	
            </remarks>	
            <param name="fontCollectionLoader">Reference to a <see cref="T:SharpDX.DirectWrite.FontCollectionLoader"/> object to be registered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontCollectionLoader(SharpDX.DirectWrite.FontCollectionLoader)">
            <summary>	
            Unregisters a custom font collection loader that was previously registered using {{RegisterFontCollectionLoader}}. 	
            </summary>	
            <param name="fontCollectionLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontCollectionLoader"/> object to be unregistered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontFileLoader(SharpDX.DirectWrite.FontFileLoader)">
            <summary>	
            Registers a font file loader with DirectWrite. 	
            </summary>	
            <remarks>	
            This function registers a font file loader with DirectWrite. The font file loader interface, which should be implemented   by a singleton object, handles loading font file resources of a particular type from a key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontFileLoader"/> object for a particular file resource type. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontFileLoader(SharpDX.DirectWrite.FontFileLoader)">
            <summary>	
            Unregisters a font file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. 	
            </summary>	
            <remarks>	
            This function unregisters font file loader callbacks with the DirectWrite font system. You should implement the font file loader interface by a singleton object. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors and must not unregister themselves in their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration of font file loaders with DirectWrite should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to the file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.GetSystemFontCollection(System.Boolean)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="checkForUpdates">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::GetSystemFontCollection([Out] IDWriteFontCollection** fontCollection,[None] BOOL checkForUpdates)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateCustomFontCollection_(System.IntPtr,System.IntPtr,System.Int32,SharpDX.DirectWrite.FontCollection@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="collectionLoader">No documentation.</param>
            <param name="collectionKey">No documentation.</param>
            <param name="collectionKeySize">No documentation.</param>
            <param name="fontCollection">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontCollection([None] IDWriteFontCollectionLoader* collectionLoader,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontCollectionLoader_(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontCollectionLoader">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontCollectionLoader_(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontCollectionLoader">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateFontFileReference(System.String,System.Nullable{System.Int64},SharpDX.DirectWrite.FontFile@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="filePath">No documentation.</param>
            <param name="lastWriteTime">No documentation.</param>
            <param name="fontFile">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const __int64* lastWriteTime,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateCustomFontFileReference_(System.IntPtr,System.Int32,System.IntPtr,SharpDX.DirectWrite.FontFile@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileReferenceKey">No documentation.</param>
            <param name="fontFileReferenceKeySize">No documentation.</param>
            <param name="fontFileLoader">No documentation.</param>
            <param name="fontFile">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontFileReference([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[None] IDWriteFontFileLoader* fontFileLoader,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateFontFace(SharpDX.DirectWrite.FontFaceType,System.Int32,SharpDX.DirectWrite.FontFile[],System.Int32,SharpDX.DirectWrite.FontSimulations,SharpDX.DirectWrite.FontFace@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFaceType">No documentation.</param>
            <param name="numberOfFiles">No documentation.</param>
            <param name="fontFiles">No documentation.</param>
            <param name="faceIndex">No documentation.</param>
            <param name="fontFaceSimulationFlags">No documentation.</param>
            <param name="fontFace">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFace([None] DWRITE_FONT_FACE_TYPE fontFaceType,[None] int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[None] int faceIndex,[None] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateRenderingParams(SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="renderingParams">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateRenderingParams([Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateMonitorRenderingParams(System.IntPtr,SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="monitor">No documentation.</param>
            <param name="renderingParams">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateMonitorRenderingParams([None] void* monitor,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateCustomRenderingParams(System.Single,System.Single,System.Single,SharpDX.DirectWrite.PixelGeometry,SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gamma">No documentation.</param>
            <param name="enhancedContrast">No documentation.</param>
            <param name="clearTypeLevel">No documentation.</param>
            <param name="pixelGeometry">No documentation.</param>
            <param name="renderingMode">No documentation.</param>
            <param name="renderingParams">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomRenderingParams([None] float gamma,[None] float enhancedContrast,[None] float clearTypeLevel,[None] DWRITE_PIXEL_GEOMETRY pixelGeometry,[None] DWRITE_RENDERING_MODE renderingMode,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontFileLoader_(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileLoader">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontFileLoader_(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileLoader">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTextFormat(System.String,SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single,System.String,SharpDX.DirectWrite.TextFormat@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFamilyName">No documentation.</param>
            <param name="fontCollection">No documentation.</param>
            <param name="fontWeight">No documentation.</param>
            <param name="fontStyle">No documentation.</param>
            <param name="fontStretch">No documentation.</param>
            <param name="fontSize">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="textFormat">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTextFormat([In] const wchar_t* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] float fontSize,[In] const wchar_t* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTypography(SharpDX.DirectWrite.Typography@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="typography">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTypography([Out] IDWriteTypography** typography)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.GetGdiInterop(SharpDX.DirectWrite.GdiInterop@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="gdiInterop">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::GetGdiInterop([Out] IDWriteGdiInterop** gdiInterop)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="text">No documentation.</param>
            <param name="stringLength">No documentation.</param>
            <param name="textFormat">No documentation.</param>
            <param name="maxWidth">No documentation.</param>
            <param name="maxHeight">No documentation.</param>
            <param name="textLayout">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float maxWidth,[None] float maxHeight,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateGdiCompatibleTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,SharpDX.DirectWrite.TextLayout@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="text">No documentation.</param>
            <param name="stringLength">No documentation.</param>
            <param name="textFormat">No documentation.</param>
            <param name="layoutWidth">No documentation.</param>
            <param name="layoutHeight">No documentation.</param>
            <param name="pixelsPerDip">No documentation.</param>
            <param name="transform">No documentation.</param>
            <param name="useGdiNatural">No documentation.</param>
            <param name="textLayout">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float layoutWidth,[None] float layoutHeight,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateEllipsisTrimmingSign(SharpDX.DirectWrite.TextFormat,SharpDX.DirectWrite.InlineObject@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textFormat">No documentation.</param>
            <param name="trimmingSign">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateEllipsisTrimmingSign([None] IDWriteTextFormat* textFormat,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTextAnalyzer(SharpDX.DirectWrite.TextAnalyzer@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textAnalyzer">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTextAnalyzer([Out] IDWriteTextAnalyzer** textAnalyzer)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateNumberSubstitution(SharpDX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean,SharpDX.DirectWrite.NumberSubstitution@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="substitutionMethod">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="ignoreUserOverride">No documentation.</param>
            <param name="numberSubstitution">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateNumberSubstitution([In] DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,[In] const wchar_t* localeName,[In] BOOL ignoreUserOverride,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateGlyphRunAnalysis(SharpDX.DirectWrite.GlyphRun@,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.MeasuringMode,System.Single,System.Single,SharpDX.DirectWrite.GlyphRunAnalysis@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="glyphRun">No documentation.</param>
            <param name="pixelsPerDip">No documentation.</param>
            <param name="transform">No documentation.</param>
            <param name="renderingMode">No documentation.</param>
            <param name="measuringMode">No documentation.</param>
            <param name="baselineOriginX">No documentation.</param>
            <param name="baselineOriginY">No documentation.</param>
            <param name="glyphRunAnalysis">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] DWRITE_RENDERING_MODE renderingMode,[None] DWRITE_MEASURING_MODE measuringMode,[None] float baselineOriginX,[None] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Factory.GdiInterop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteFactory::GetGdiInterop([Out] IDWriteGdiInterop** gdiInterop)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Ellipse">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ELLIPSE</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Ellipse.#ctor(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Ellipse"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radiusX">The radius X.</param>
            <param name="radiusY">The radius Y.</param>
        </member>
        <member name="F:SharpDX.Direct2D1.Ellipse.Point">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Ellipse.RadiusX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float radiusX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Ellipse.RadiusY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float radiusY</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRenderer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTextRenderer</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnapping">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWritePixelSnapping</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.PixelSnapping.IsPixelSnappingDisabled(System.Object)">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
            <unmanaged>HRESULT IsPixelSnappingDisabled([None] void* clientDrawingContext,[Out] BOOL* isDisabled)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.PixelSnapping.GetCurrentTransform(System.Object)">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
            <unmanaged>HRESULT GetCurrentTransform([None] void* clientDrawingContext,[Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.PixelSnapping.GetPixelsPerDip(System.Object)">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>the number of physical pixels per DIP</returns>
            <unmanaged>HRESULT GetPixelsPerDip([None] void* clientDrawingContext,[Out] FLOAT* pixelsPerDip)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawGlyphRun(System.Object,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <remarks>	
            The <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> function calls this callback function with all the information about glyphs to render. The application implements this callback by mostly delegating the call to the underlying platform's graphics API such as {{Direct2D}} to draw glyphs on the drawing context. An application that uses GDI can implement this callback in terms of the <see cref="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)"/> method.	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawUnderline(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Underline@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffect"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawStrikethrough(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Strikethrough@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffect">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalyzer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTextAnalyzer</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.#ctor(SharpDX.DirectWrite.Factory)">
            <summary>	
            Returns an interface for performing text analysis. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <unmanaged>HRESULT IDWriteFactory::CreateTextAnalyzer([Out] IDWriteTextAnalyzer** textAnalyzer)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeScript(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink  callback {{SetScript}}. 	
            </summary>	
            <param name="analysisSource">A reference to the source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeScript([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeBidi(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback {{SetBidiLevel}}. 	
            </summary>	
            <remarks>	
            While the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs. Otherwise, the returned levels may be wrong, because the Bidi algorithm is meant to apply to the paragraph as a whole.  	
            </remarks>	
            <param name="analysisSource">A reference to a source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeBidi([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback {{SetNumberSubstitution}}. 	
            </summary>	
            <remarks>	
            Although the function can handle multiple ranges of differing number substitutions, the text ranges should not arbitrarily split the middle of numbers. Otherwise, it will treat the numbers separately and will not translate any intervening punctuation.  	
            </remarks>	
            <param name="analysisSource">The source object to analyze. </param>
            <param name="textPosition">The starting position within the source object. </param>
            <param name="textLength">The length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeNumberSubstitution([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback {{SetLineBreakpoints}}. 	
            </summary>	
            <remarks>	
            Although the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs, unless the specified text span is considered a whole unit. Otherwise, the returned properties for the first and last characters will inappropriately allow breaks.  	
            </remarks>	
            <param name="analysisSource">A reference to the source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the  sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeLineBreakpoints([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextAnalyzer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeScript__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="analysisSource">No documentation.</param>
            <param name="textPosition">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="analysisSink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeScript([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeBidi__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="analysisSource">No documentation.</param>
            <param name="textPosition">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="analysisSink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeBidi([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="analysisSource">No documentation.</param>
            <param name="textPosition">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="analysisSink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeNumberSubstitution([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="analysisSource">No documentation.</param>
            <param name="textPosition">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="analysisSink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeLineBreakpoints([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.GetGlyphs(System.String,System.Int32,SharpDX.DirectWrite.FontFace,System.Boolean,System.Boolean,SharpDX.DirectWrite.ScriptAnalysis,System.String,SharpDX.DirectWrite.NumberSubstitution,SharpDX.DirectWrite.TypographicFeatures[],System.Int32[],System.Int32,System.Int32,System.Int16[],SharpDX.DirectWrite.ShapingTextProperties[],System.Int16[],SharpDX.DirectWrite.ShapingGlyphProperties[],System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textString">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="fontFace">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <param name="isRightToLeft">No documentation.</param>
            <param name="scriptAnalysis">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="numberSubstitution">No documentation.</param>
            <param name="features">No documentation.</param>
            <param name="featureRangeLengths">No documentation.</param>
            <param name="featureRanges">No documentation.</param>
            <param name="maxGlyphCount">No documentation.</param>
            <param name="clusterMap">No documentation.</param>
            <param name="textProps">No documentation.</param>
            <param name="glyphIndices">No documentation.</param>
            <param name="glyphProps">No documentation.</param>
            <param name="actualGlyphCount">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::GetGlyphs([In, Buffer] const wchar_t* textString,[None] int textLength,[None] IDWriteFontFace* fontFace,[None] BOOL isSideways,[None] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[None] IDWriteNumberSubstitution* numberSubstitution,[In, Buffer, Optional] const DWRITE_TYPOGRAPHIC_FEATURES** features,[In, Buffer, Optional] const int* featureRangeLengths,[None] int featureRanges,[None] int maxGlyphCount,[Out, Buffer] short* clusterMap,[Out, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[Out, Buffer] short* glyphIndices,[Out, Buffer] DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[Out] int* actualGlyphCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.GetGlyphPlacements(System.String,System.Int16[],SharpDX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],SharpDX.DirectWrite.ShapingGlyphProperties[],System.Int32,SharpDX.DirectWrite.FontFace,System.Single,System.Boolean,System.Boolean,SharpDX.DirectWrite.ScriptAnalysis,System.String,SharpDX.DirectWrite.TypographicFeatures[],System.Int32[],System.Int32,System.Single[],SharpDX.DirectWrite.GlyphOffset[])">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textString">No documentation.</param>
            <param name="clusterMap">No documentation.</param>
            <param name="textProps">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="glyphIndices">No documentation.</param>
            <param name="glyphProps">No documentation.</param>
            <param name="glyphCount">No documentation.</param>
            <param name="fontFace">No documentation.</param>
            <param name="fontEmSize">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <param name="isRightToLeft">No documentation.</param>
            <param name="scriptAnalysis">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="features">No documentation.</param>
            <param name="featureRangeLengths">No documentation.</param>
            <param name="featureRanges">No documentation.</param>
            <param name="glyphAdvances">No documentation.</param>
            <param name="glyphOffsets">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::GetGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[None] int textLength,[In, Buffer] const short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[None] int glyphCount,[None] IDWriteFontFace* fontFace,[None] float fontEmSize,[None] BOOL isSideways,[None] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Buffer, Optional] const DWRITE_TYPOGRAPHIC_FEATURES** features,[In, Buffer, Optional] const int* featureRangeLengths,[None] int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.GetGdiCompatibleGlyphPlacements(System.String,System.Int16[],SharpDX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],SharpDX.DirectWrite.ShapingGlyphProperties[],System.Int32,SharpDX.DirectWrite.FontFace,System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,System.Boolean,System.Boolean,SharpDX.DirectWrite.ScriptAnalysis,System.String,SharpDX.DirectWrite.TypographicFeatures[],System.Int32[],System.Int32,System.Single[],SharpDX.DirectWrite.GlyphOffset[])">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textString">No documentation.</param>
            <param name="clusterMap">No documentation.</param>
            <param name="textProps">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="glyphIndices">No documentation.</param>
            <param name="glyphProps">No documentation.</param>
            <param name="glyphCount">No documentation.</param>
            <param name="fontFace">No documentation.</param>
            <param name="fontEmSize">No documentation.</param>
            <param name="pixelsPerDip">No documentation.</param>
            <param name="transform">No documentation.</param>
            <param name="useGdiNatural">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <param name="isRightToLeft">No documentation.</param>
            <param name="scriptAnalysis">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="features">No documentation.</param>
            <param name="featureRangeLengths">No documentation.</param>
            <param name="featureRanges">No documentation.</param>
            <param name="glyphAdvances">No documentation.</param>
            <param name="glyphOffsets">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[None] int textLength,[In, Buffer] const short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[None] int glyphCount,[None] IDWriteFontFace* fontFace,[None] float fontEmSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[None] BOOL isSideways,[None] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Buffer, Optional] const DWRITE_TYPOGRAPHIC_FEATURES** features,[In, Buffer, Optional] const int* featureRangeLengths,[None] int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoaderCallback">
            <summary>
            Internal FontFileLoader Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderCallback.#ctor(SharpDX.DirectWrite.FontFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileLoaderCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileLoaderCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoaderCallback.CreateStreamFromKeyDelegate">
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFileLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoader.CreateStreamFromKey(SharpDX.DataStream)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFileStream"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumeratorCallback">
            <summary>
            Internal FontFileEnumerator Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileEnumeratorCallback.#ctor(SharpDX.DirectWrite.FontFileEnumerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileEnumeratorCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileEnumeratorCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumeratorCallback.MoveNextDelegate">
            <summary>	
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file. 	
            </summary>	
            <returns>the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::MoveNext([Out] BOOL* hasCurrentFile)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumeratorCallback.GetCurrentFontFileDelegate">
            <summary>	
            Gets a reference to the current font file. 	
            </summary>	
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFile"/> object.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::GetCurrentFontFile([Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_RANGE</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextRange"/> struct.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="length">The length.</param>
        </member>
        <member name="F:SharpDX.DirectWrite.TextRange.StartPosition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int startPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextRange.Length">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int length</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSink">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTextAnalysisSink</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetScriptAnalysis(System.Int32,System.Int32,SharpDX.DirectWrite.ScriptAnalysis)">
            <summary>	
            Reports script analysis for the specified text range.	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="scriptAnalysis">A reference to a structure that contains a zero-based index representation of a writing system script and a value indicating whether additional shaping of text is required. </param>
            <returns>A successful code or error code to stop analysis. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetScriptAnalysis([None] int textPosition,[None] int textLength,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetLineBreakpoints(System.Int32,System.Int32,SharpDX.DirectWrite.LineBreakpoint[])">
            <summary>	
            Sets line-break opportunities for each character, starting from the specified position.	
            </summary>	
            <param name="textPosition">The starting text position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="lineBreakpoints">A reference to a structure that contains breaking conditions set for each character from the starting position to the end of the specified range. </param>
            <returns>A successful code or error code to stop analysis. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetLineBreakpoints([None] int textPosition,[None] int textLength,[In, Buffer] const DWRITE_LINE_BREAKPOINT* lineBreakpoints)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetBidiLevel(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>	
            Sets a bidirectional level on the range, which is  called once per  run change (either explicit or resolved implicit).	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="explicitLevel">The explicit level from the paragraph reading direction and any embedded control codes RLE/RLO/LRE/LRO/PDF, which is determined before any additional rules. </param>
            <param name="resolvedLevel">The final implicit level considering the explicit level and characters' natural directionality, after all Bidi rules have been applied. </param>
            <returns>A successful code or error code to stop analysis. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetBidiLevel([None] int textPosition,[None] int textLength,[None] int explicitLevel,[None] int resolvedLevel)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetNumberSubstitution(System.Int32,System.Int32,SharpDX.DirectWrite.NumberSubstitution)">
            <summary>	
            Sets the number substitution on the text range affected by the text analysis.	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="numberSubstitution">An object that holds the appropriate digits and numeric punctuation for a given locale. Use <see cref="M:SharpDX.DirectWrite.Factory.CreateNumberSubstitution(SharpDX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean,SharpDX.DirectWrite.NumberSubstitution@)"/> to create this object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetNumberSubstitution([None] int textPosition,[None] int textLength,[None] IDWriteNumberSubstitution* numberSubstitution)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStream">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFileStream</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:SharpDX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of  </param>
            <returns>a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.ReleaseFileFragment(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.GetFileSize">
            <summary>	
            Obtains the total size of a file. 	
            </summary>	
            <remarks>	
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).  	
            </remarks>	
            <returns>the total size of the file. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.GetLastWriteTime">
            <summary>	
            Obtains the last modified time of the file.  	
            </summary>	
            <remarks>	
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one. 	
            </remarks>	
            <returns>the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.DesignUnitsPerEm">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short designUnitsPerEm</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.Ascent">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short ascent</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.Descent">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short descent</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.LineGap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short lineGap</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.CapHeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short capHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.XHeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short xHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.UnderlinePosition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short underlinePosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.UnderlineThickness">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short underlineThickness</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.StrikethroughPosition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short strikethroughPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.StrikethroughThickness">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short strikethroughThickness</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_GLYPH_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.LeftSideBearing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int leftSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.AdvanceWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int advanceWidth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.RightSideBearing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int rightSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.TopSideBearing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int topSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.AdvanceHeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int advanceHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.BottomSideBearing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int bottomSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.VerticalOriginY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int verticalOriginY</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_GLYPH_OFFSET</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphOffset.AdvanceOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float advanceOffset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphOffset.AscenderOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ascenderOffset</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Matrix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MATRIX</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M11">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float m11</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M12">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float m12</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M21">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float m21</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M22">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float m22</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.Dx">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dx</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.Dy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dy</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFeature">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeature.NameTag">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG nameTag</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeature.Parameter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int parameter</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFeature.#ctor(SharpDX.DirectWrite.FontFeatureTag,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFeature"/> struct.
            </summary>
            <param name="nameTag">The name tag.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:SharpDX.DirectWrite.TypographicFeatures">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TYPOGRAPHIC_FEATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TypographicFeatures.Features">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE* features</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TypographicFeatures.FeatureCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int featureCount</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Trimming">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Trimming.Granularity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY granularity</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Trimming.Delimiter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int delimiter</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Trimming.DelimiterCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int delimiterCount</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ScriptAnalysis">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_ANALYSIS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptAnalysis.Script">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short script</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptAnalysis.Shapes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES shapes</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LineBreakpoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_LINE_BREAKPOINT</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionBefore_">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte breakConditionBefore</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionAfter_">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte breakConditionAfter</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.IsWhitespace">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte isWhitespace</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.IsSoftHyphen">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte isSoftHyphen</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.Padding">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte padding</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionBefore">
            <summary>	
            Indicates a breaking condition before the character. 	
            </summary>	
            <unmanaged>byte breakConditionBefore</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionAfter">
            <summary>	
            Indicates a breaking condition after the character. 	
            </summary>	
            <unmanaged>byte breakConditionAfter</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ShapingTextProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_SHAPING_TEXT_PROPERTIES</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingTextProperties.IsShapedAlone">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isShapedAlone</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingTextProperties.Reserved">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short reserved</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRun">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_GLYPH_RUN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.FontFacePointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFace* fontFace</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.FontSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fontEmSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int glyphCount</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphIndicesPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const short* glyphIndices</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphAdvancesPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const float* glyphAdvances</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphOffsetsPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const DWRITE_GLYPH_OFFSET* glyphOffsets</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.BidiLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int bidiLevel</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRun.ToArrays(System.Single[]@,SharpDX.DirectWrite.GlyphOffset[]@)">
            <summary>
            Trannsform this GlyphRun to individual indices, advances and offsets arrays.
            </summary>
            <param name="advances">The advances array.</param>
            <param name="offsets">The offsets array.</param>
            <returns>the indices array.</returns>
        </member>
        <member name="P:SharpDX.DirectWrite.GlyphRun.IsSideways">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL isSideways</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.GlyphRun.FontFace">
            <summary>
            Gets or sets the <see cref="P:SharpDX.DirectWrite.GlyphRun.FontFace"/> associated with this GlypRun.
            </summary>
            <value>The font face.</value>
        </member>
        <member name="P:SharpDX.DirectWrite.GlyphRun.Items">
            <summary>
            Gets or sets an array containing glyph advance widths for the glyph run. 
            </summary>
            <value>The glyph advances.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRunDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_GLYPH_RUN_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.LocaleName">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const wchar_t* localeName</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.Text">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const wchar_t* string</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.TextLength">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int stringLength</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.ClusterMap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const short* clusterMap</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.TextPosition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int textPosition</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Underline">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_UNDERLINE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.Thickness">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float thickness</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.Offset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float offset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.RunHeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float runHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.ReadingDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION readingDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.FlowDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION flowDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.LocaleName">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const wchar_t* localeName</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.MeasuringMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE measuringMode</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Strikethrough">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_STRIKETHROUGH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.Thickness">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float thickness</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.Offset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float offset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.ReadingDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION readingDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.FlowDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION flowDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.LocaleName">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const wchar_t* localeName</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.MeasuringMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE measuringMode</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LineMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_LINE_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.Length">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int length</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.TrailingWhitespaceLength">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int trailingWhitespaceLength</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.NewlineLength">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int newlineLength</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.Height">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.Baseline">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float baseline</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineMetrics.IsTrimmed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL isTrimmed</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ClusterMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_CLUSTER_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ClusterMetrics.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ClusterMetrics.Length">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short length</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.CanWrapLineAfter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short canWrapLineAfter</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsWhitespace">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isWhitespace</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsNewline">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isNewline</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsSoftHyphen">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isSoftHyphen</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsRightToLeft">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short isRightToLeft</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.Padding">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short padding</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Left">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float left</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Top">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float top</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.WidthIncludingTrailingWhitespace">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float widthIncludingTrailingWhitespace</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Height">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.LayoutWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float layoutWidth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.LayoutHeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float layoutHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.MaxBidiReorderingDepth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int maxBidiReorderingDepth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.LineCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lineCount</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_INLINE_OBJECT_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InlineObjectMetrics.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InlineObjectMetrics.Height">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InlineObjectMetrics.Baseline">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float baseline</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectMetrics.SupportsSideways">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL supportsSideways</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.OverhangMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_OVERHANG_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Left">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float left</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Top">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float top</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Right">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float right</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Bottom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float bottom</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.HitTestMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_HIT_TEST_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.TextPosition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int textPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Length">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int length</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Left">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float left</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Top">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float top</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Height">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.BidiLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int bidiLevel</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.HitTestMetrics.IsText">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL isText</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.HitTestMetrics.IsTrimmed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL isTrimmed</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTextAnalysisSource</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetTextAtPosition(System.Int32)">
            <summary>	
            Gets a block of text starting at the specified text position. 	
            </summary>	
            <remarks>	
            Returning NULL indicates the end of text, which is the position after the last character. This function is called iteratively for each consecutive block, tying together several fragmented blocks in the backing store into a virtual contiguous string. Although applications can implement sparse textual content that  maps only part of the backing store, the application must map any text that is in the range passed to any analysis functions. 	
            </remarks>	
            <param name="textPosition">The first position of the piece to obtain. All positions are in UTF16 code units, not whole characters, which matters when supplementary characters are used. </param>      
            <returns>a block of text </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextAtPosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetTextBeforePosition(System.Int32)">
            <summary>	
            Gets a block of text immediately preceding the specified position.	
            </summary>	
            <remarks>	
            NULL indicates no chunk available at the specified position, either because textPosition equals 0,  textPosition is greater than the entire text content length, or the queried position is not mapped into the application's backing store. Although applications can implement sparse textual content that  maps only part of the backing store, the application must map any text that is in the range passed to any analysis functions. 	
            </remarks>	
            <param name="textPosition">The position immediately after the last position of the block of text to obtain. </param>
            <returns>text immediately preceding the specified position </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextBeforePosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetLocaleName(System.Int32)">
            <summary>	
            Gets the locale name on the range affected by the text analysis.	
            </summary>	
            <remarks>	
            The localeName reference must remain valid until the next call or until the analysis returns. 	
            </remarks>	
            <param name="textPosition">The text position to examine. </param>
            <returns>the locale name on the range affected by the text analysis </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetLocaleName([None] int textPosition,[Out] int* textLength,[Out] const wchar_t** localeName)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetNumberSubstitution(System.Int32,System.Int32@)">
            <summary>	
            Gets the number substitution from the text range affected by the text analysis.	
            </summary>	
            <remarks>	
            Any implementation should return the number substitution with an incremented reference count, and the analysis will release when finished with it (either before the next call or before it returns). However, the sink callback may hold onto it after that. 	
            </remarks>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">Contains  the length of the text, in characters, remaining in the text range up to the next differing number substitution. </param>
            <returns>the number substitution from the text range affected by the text analysis.</returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetNumberSubstitution([None] int textPosition,[Out] int* textLength,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextAnalysisSource.ReadingDirection">
            <summary>	
            Gets the paragraph reading direction.	
            </summary>	
            <returns>The reading direction of the current paragraph. </returns>
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextAnalysisSource::GetParagraphReadingDirection()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback">
            <summary>
            Internal TextAnalysisSink Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSinkCallback.#ctor(SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextAnalysisSinkCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.TextAnalysisSinkCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetScriptAnalysisDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetScriptAnalysis([None] int textPosition,[None] int textLength,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetLineBreakpointsDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetLineBreakpoints([None] int textPosition,[None] int textLength,[In, Buffer] const DWRITE_LINE_BREAKPOINT* lineBreakpoints)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetBidiLevelDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetBidiLevel([None] int textPosition,[None] int textLength,[None] int explicitLevel,[None] int resolvedLevel)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetNumberSubstitutionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetNumberSubstitution([None] int textPosition,[None] int textLength,[None] IDWriteNumberSubstitution* numberSubstitution)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumerator">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFileEnumerator</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileEnumerator.MoveNext">
            <summary>	
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file. 	
            </summary>	
            <returns>the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::MoveNext([Out] BOOL* hasCurrentFile)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileEnumerator.CurrentFontFile">
            <summary>	
            Gets a reference to the current font file. 	
            </summary>	
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFile"/> object.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::GetCurrentFontFile([Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySinkCallback">
            <summary>
            Internal GeometrySink Callback
            </summary>
        </member>
        <member name="T:SharpDX.Direct2D1.SimplifiedGeometrySinkCallback">
            <summary>
            Internal SimplifiedGeometrySink Callback
            </summary>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererBase">
            <summary>
            Default abstract implementation of TextRenderer. Need to implement a least a DrawXXX method to use it.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.IsPixelSnappingDisabled(System.Object)">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
            <unmanaged>HRESULT IsPixelSnappingDisabled([None] void* clientDrawingContext,[Out] BOOL* isDisabled)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.GetCurrentTransform(System.Object)">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
            <unmanaged>HRESULT GetCurrentTransform([None] void* clientDrawingContext,[Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.GetPixelsPerDip(System.Object)">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>the number of physical pixels per DIP</returns>
            <unmanaged>HRESULT GetPixelsPerDip([None] void* clientDrawingContext,[Out] FLOAT* pixelsPerDip)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawGlyphRun(System.Object,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <remarks>	
            The <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> function calls this callback function with all the information about glyphs to render. The application implements this callback by mostly delegating the call to the underlying platform's graphics API such as {{Direct2D}} to draw glyphs on the drawing context. An application that uses GDI can implement this callback in terms of the <see cref="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)"/> method.	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawUnderline(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Underline@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffect"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawStrikethrough(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Strikethrough@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffect">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_PROPERTIES</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapProperties.#ctor(SharpDX.Direct2D1.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapProperties.#ctor(SharpDX.Direct2D1.PixelFormat,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapProperties.PixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapProperties.DpiX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dpiX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapProperties.DpiY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dpiY</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontCollection</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontCollectionLoader,SharpDX.DataStream)">
            <summary>	
            Creates a font collection using a custom font collection loader. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="collectionLoader">An application-defined font collection loader, which must have been previously registered using <see cref="M:SharpDX.DirectWrite.Factory.RegisterFontCollectionLoader_(System.IntPtr)"/>. </param>
            <param name="collectionKey">The key used by the loader to identify a collection of font files.  The buffer allocated for this key should at least be the size of collectionKeySize. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontCollection([None] IDWriteFontCollectionLoader* collectionLoader,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.FindFamilyName(System.String,System.Int32@)">
            <summary>	
            Finds the font family with the specified family name. 	
            </summary>	
            <param name="familyName">An array of characters, which is null-terminated, containing the name of the font family. The name is not case-sensitive but must otherwise exactly match a family name in the collection. </param>
            <param name="index">When this method returns, contains the zero-based index of the matching font family if the family name was found; otherwise, UINT_MAX. </param>
            <returns>TRUE if the family name exists; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFontCollection::FindFamilyName([In] const wchar_t* familyName,[Out] int* index,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontCollection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.GetFontFamilyCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteFontCollection::GetFontFamilyCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.GetFontFamily(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="index">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontCollection::GetFontFamily([None] int index,[Out] IDWriteFontFamily** fontFamily)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.FindFamilyName(System.String,System.Int32@,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="familyName">No documentation.</param>
            <param name="index">No documentation.</param>
            <param name="exists">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontCollection::FindFamilyName([In] const wchar_t* familyName,[Out] int* index,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.GetFontFromFontFace(SharpDX.DirectWrite.FontFace)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFace">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontCollection::GetFontFromFontFace([None] IDWriteFontFace* fontFace,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontCollection.FontFamilyCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int IDWriteFontCollection::GetFontFamilyCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Font">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFont</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetInformationalStrings(SharpDX.DirectWrite.InformationalStringId,SharpDX.DirectWrite.LocalizedStrings@)">
            <summary>	
            Gets a localized strings collection containing the specified informational strings, indexed by locale name. 	
            </summary>	
            <remarks>	
            If the font does not contain the string specified by informationalStringID, the return value is S_OK but  informationalStrings receives a NULL reference and exists receives the value FALSE. 	
            </remarks>	
            <param name="informationalStringID">A value that identifies the  informational string to get. For example, <see cref="F:SharpDX.DirectWrite.InformationalStringId.Description"/> specifies a string that contains a description of the font.  </param>
            <param name="informationalStrings">When this method returns, contains an address of a reference to the newly created localized strings object. </param>
            <returns>TRUE if the font contains the specified string ID; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFont::GetInformationalStrings([None] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.HasCharacter(System.Int32)">
            <summary>	
            Determines whether the font supports a specified character. 	
            </summary>	
            <param name="unicodeValue">A Unicode (UCS-4) character value for the method to inspect. </param>
            <returns>TRUE if the font supports the specified character; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFont::HasCharacter([None] int unicodeValue,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.Font"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetFontFamily(SharpDX.DirectWrite.FontFamily@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFamily">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFont::GetFontFamily([Out] IDWriteFontFamily** fontFamily)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetWeight">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteFont::GetWeight()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetStretch">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_STRETCH IDWriteFont::GetStretch()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetStyle">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_STYLE IDWriteFont::GetStyle()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.IsSymbolFont_">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>BOOL IDWriteFont::IsSymbolFont()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetFaceNames(SharpDX.DirectWrite.LocalizedStrings@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="names">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFont::GetFaceNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetInformationalStrings(SharpDX.DirectWrite.InformationalStringId,SharpDX.DirectWrite.LocalizedStrings@,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="informationalStringID">No documentation.</param>
            <param name="informationalStrings">No documentation.</param>
            <param name="exists">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFont::GetInformationalStrings([None] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetSimulations">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFont::GetSimulations()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetMetrics(SharpDX.DirectWrite.FontMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontMetrics">No documentation.</param>
            <unmanaged>void IDWriteFont::GetMetrics([Out] DWRITE_FONT_METRICS* fontMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.HasCharacter(System.Int32,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="unicodeValue">No documentation.</param>
            <param name="exists">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFont::HasCharacter([None] int unicodeValue,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.CreateFontFace(SharpDX.DirectWrite.FontFace@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFace">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFont::CreateFontFace([Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.FontFamily">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteFont::GetFontFamily([Out] IDWriteFontFamily** fontFamily)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Weight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteFont::GetWeight()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Stretch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH IDWriteFont::GetStretch()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Style">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE IDWriteFont::GetStyle()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.IsSymbolFont">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL IDWriteFont::IsSymbolFont()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.FaceNames">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteFont::GetFaceNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Simulations">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFont::GetSimulations()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Metrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void IDWriteFont::GetMetrics([Out] DWRITE_FONT_METRICS* fontMetrics)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PixelFormat.Format">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DXGI_FORMAT format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PixelFormat.AlphaMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE alphaMode</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PixelFormat.#ctor(SharpDX.DXGI.Format,SharpDX.Direct2D1.AlphaMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.PixelFormat"/> struct.
            </summary>
            <param name="format">A value that specifies the size and arrangement of channels in each pixel.</param>
            <param name="alphaMode">A value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unkown.</param>
        </member>
        <member name="T:SharpDX.Direct2D1.GradientStop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GRADIENT_STOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GradientStop.Position">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float position</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GradientStop.Color">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COLOR_F color</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BrushProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BrushProperties.Opacity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float opacity</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BrushProperties.Transform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_MATRIX_3X2_F transform</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapBrushProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapBrushProperties.ExtendModeX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE extendModeX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapBrushProperties.ExtendModeY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE extendModeY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapBrushProperties.InterpolationMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE interpolationMode</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LinearGradientBrushProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LinearGradientBrushProperties.StartPoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F startPoint</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LinearGradientBrushProperties.EndPoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F endPoint</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RadialGradientBrushProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.Center">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F center</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.GradientOriginOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F gradientOriginOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.RadiusX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float radiusX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.RadiusY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float radiusY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BezierSegment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BEZIER_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BezierSegment.Point1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BezierSegment.Point2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BezierSegment.Point3">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point3</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Triangle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TRIANGLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Triangle.Point1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Triangle.Point2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Triangle.Point3">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point3</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.ArcSegment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ARC_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.Point">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_F size</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.RotationAngle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float rotationAngle</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.SweepDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION sweepDirection</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.ArcSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE arcSize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.QuadraticBezierSegment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.QuadraticBezierSegment.Point1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.QuadraticBezierSegment.Point2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_POINT_2F point2</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RoundedRect">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ROUNDED_RECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RoundedRect.Rect">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RECT_F rect</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RoundedRect.RadiusX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float radiusX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RoundedRect.RadiusY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float radiusY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.StrokeStyleProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_STROKE_STYLE_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.StartCap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE startCap</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.EndCap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE endCap</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.DashCap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE dashCap</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.LineJoin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN lineJoin</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.MiterLimit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float miterLimit</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.DashStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE dashStyle</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.DashOffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dashOffset</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LayerParameters">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LAYER_PARAMETERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.ContentBounds">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RECT_F contentBounds</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.GeometricMask">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Geometry* geometricMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.MaskAntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE maskAntialiasMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.MaskTransform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_MATRIX_3X2_F maskTransform</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.Opacity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float opacity</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.OpacityBrush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID2D1Brush* opacityBrush</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.LayerOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS layerOptions</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTargetProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.Type">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE type</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.PixelFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.DpiX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dpiX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.DpiY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float dpiY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.Usage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.MinLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL minLevel</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTargetProperties.#ctor(SharpDX.Direct2D1.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RenderTargetProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTargetProperties.#ctor(SharpDX.Direct2D1.RenderTargetType,SharpDX.Direct2D1.PixelFormat,System.Single,System.Single,SharpDX.Direct2D1.RenderTargetUsage,SharpDX.Direct2D1.FeatureLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RenderTargetProperties"/> struct.
            </summary>
            <param name="type">A value that specifies whether the render target should force hardware or software rendering. A value of <see cref="F:SharpDX.Direct2D1.RenderTargetType.Default"/> specifies that the render target should use hardware rendering if it is available; otherwise, it uses software rendering. Note that WIC bitmap render targets do not support hardware rendering.</param>
            <param name="pixelFormat">The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}.</param>
            <param name="dpiX">The horizontal DPI of the render target.  To use the default DPI, set dpiX and dpiY to 0. For more information, see the Remarks section. 	</param>
            <param name="dpiY">The vertical DPI of the render target. To use the default DPI, set dpiX and dpiY to 0.  For more information, see the Remarks section. 	</param>
            <param name="usage">A value that specifies how the render target is remoted and whether it should be GDI-compatible.  Set to <see cref="F:SharpDX.Direct2D1.RenderTargetUsage.None"/> to create a render target that is not compatible with GDI and uses Direct3D command-stream remoting if it  is available.</param>
            <param name="minLevel">A value that specifies the minimum Direct3D feature level required for hardware rendering. If the specified minimum level is not available, the render target uses software rendering if the type  member is set to <see cref="F:SharpDX.Direct2D1.RenderTargetType.Default"/>; if  type  is set to to D2D1_RENDER_TARGET_TYPE_HARDWARE, render target creation fails. A value of <see cref="F:SharpDX.Direct2D1.FeatureLevel.Level_DEFAULT"/> indicates that Direct2D should determine whether the Direct3D feature level of the device is adequate. This field is used only when creating <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> and <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> objects.	</param>  
        </member>
        <member name="T:SharpDX.Direct2D1.HwndRenderTargetProperties">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.HwndRenderTargetProperties.Hwnd">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void* hwnd</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.HwndRenderTargetProperties.PixelSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SIZE_U pixelSize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.HwndRenderTargetProperties.PresentOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS presentOptions</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DrawingStateDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.AntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE antialiasMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.TextAntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.Tag1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TAG tag1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.Tag2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TAG tag2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.Transform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_MATRIX_3X2_F transform</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FactoryOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FACTORY_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FactoryOptions.DebugLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL debugLevel</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Typography">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTypography</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.#ctor(SharpDX.DirectWrite.Factory)">
            <summary>	
            Creates a typography object for use in a text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <unmanaged>HRESULT IDWriteFactory::CreateTypography([Out] IDWriteTypography** typography)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.Typography"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.AddFontFeature(SharpDX.DirectWrite.FontFeature)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFeature">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTypography::AddFontFeature([None] DWRITE_FONT_FEATURE fontFeature)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.GetFontFeatureCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteTypography::GetFontFeatureCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.GetFontFeature(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFeatureIndex">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTypography::GetFontFeature([None] int fontFeatureIndex,[Out] DWRITE_FONT_FEATURE* fontFeature)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Typography.FontFeatureCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int IDWriteTypography::GetFontFeatureCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoaderNative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFileLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderNative.CreateStreamFromKey(SharpDX.DataStream)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFileStream"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileLoaderNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderNative.CreateStreamFromKey_(System.IntPtr,System.Int32,SharpDX.DirectWrite.FontFileStream@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileReferenceKey">No documentation.</param>
            <param name="fontFileReferenceKeySize">No documentation.</param>
            <param name="fontFileStream">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ScriptJustify">
            <summary>
            Defines glyph characteristic information that an application needs to implement justification.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.None">
            <summary>
            Justification cannot be applied at the glyph.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicBlank">
            <summary>
            The glyph represents a blank in an Arabic run.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.Character">
            <summary>
            An inter-character justification point follows the glyph.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.Blank">
            <summary>
            The glyph represents a blank outside an Arabic run.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicNormal">
            <summary>
            Normal middle-of-word glyph that connects to the right (begin).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicKashida">
            <summary>
            Kashida (U+0640) in the middle of the word.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicAlef">
            <summary>
            Final form of an alef-like (U+0627, U+0625, U+0623, U+0622).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicHa">
            <summary>
            Final form of Ha (U+0647).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicRa">
            <summary>
            Final form of Ra (U+0631).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicBa">
            <summary>
            Final form of Ba (U+0628).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicBaRa">
            <summary>
            Ligature of alike (U+0628,U+0631).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicSeen">
            <summary>
            Highest priority: initial shape of Seen class (U+0633).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicSeenMedial">
            <summary>
            Highest priority: medial shape of Seen class (U+0633).
            </summary>
        </member>
        <member name="T:SharpDX.DirectWrite.DWrite">
            <summary>
            DWrite Functions.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.DWrite.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.DWrite.CreateFactory(SharpDX.DirectWrite.FactoryType,System.Guid,SharpDX.ComObject@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="factoryType">No documentation.</param>
            <param name="iid">No documentation.</param>
            <param name="factory">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DWriteCreateFactory([In] DWRITE_FACTORY_TYPE factoryType,[In] GUID* iid,[Out] IUnknown** factory)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTextFormat</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,System.Single)">
            <summary>	
             Creates a text format object used for text layout with normal weight, style and stretch.
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,System.Single)">
            <summary>	
             Creates a text format object used for text layout with normal stretch.
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single,System.String)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <param name="localeName">An array of characters that contains the locale name.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextFormat"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetTextAlignment(SharpDX.DirectWrite.TextAlignment)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textAlignment">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetTextAlignment([None] DWRITE_TEXT_ALIGNMENT textAlignment)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetParagraphAlignment(SharpDX.DirectWrite.ParagraphAlignment)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="paragraphAlignment">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetParagraphAlignment([None] DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetWordWrapping(SharpDX.DirectWrite.WordWrapping)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="wordWrapping">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetWordWrapping([None] DWRITE_WORD_WRAPPING wordWrapping)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetReadingDirection(SharpDX.DirectWrite.ReadingDirection)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="readingDirection">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetReadingDirection([None] DWRITE_READING_DIRECTION readingDirection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetFlowDirection(SharpDX.DirectWrite.FlowDirection)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="flowDirection">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetFlowDirection([None] DWRITE_FLOW_DIRECTION flowDirection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetIncrementalTabStop(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="incrementalTabStop">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetIncrementalTabStop([None] float incrementalTabStop)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetTrimming_(SharpDX.DirectWrite.Trimming,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="trimmingOptions">No documentation.</param>
            <param name="trimmingSign">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetTrimming([In] const DWRITE_TRIMMING* trimmingOptions,[None] IDWriteInlineObject* trimmingSign)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetLineSpacing(SharpDX.DirectWrite.LineSpacingMethod,System.Single,System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="lineSpacingMethod">No documentation.</param>
            <param name="lineSpacing">No documentation.</param>
            <param name="baseline">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetLineSpacing([None] DWRITE_LINE_SPACING_METHOD lineSpacingMethod,[None] float lineSpacing,[None] float baseline)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetTextAlignment">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_TEXT_ALIGNMENT IDWriteTextFormat::GetTextAlignment()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetParagraphAlignment">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT IDWriteTextFormat::GetParagraphAlignment()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetWordWrapping">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_WORD_WRAPPING IDWriteTextFormat::GetWordWrapping()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetReadingDirection">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextFormat::GetReadingDirection()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFlowDirection">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FLOW_DIRECTION IDWriteTextFormat::GetFlowDirection()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetIncrementalTabStop">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteTextFormat::GetIncrementalTabStop()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetTrimming(SharpDX.DirectWrite.Trimming@,SharpDX.DirectWrite.InlineObject@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="trimmingOptions">No documentation.</param>
            <param name="trimmingSign">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetTrimming([Out] DWRITE_TRIMMING* trimmingOptions,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetLineSpacing(SharpDX.DirectWrite.LineSpacingMethod@,System.Single@,System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="lineSpacingMethod">No documentation.</param>
            <param name="lineSpacing">No documentation.</param>
            <param name="baseline">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetLineSpacing([Out] DWRITE_LINE_SPACING_METHOD* lineSpacingMethod,[Out] float* lineSpacing,[Out] float* baseline)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontCollection(SharpDX.DirectWrite.FontCollection@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontCollection">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontFamilyNameLength">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteTextFormat::GetFontFamilyNameLength()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontFamilyName(System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFamilyName">No documentation.</param>
            <param name="nameSize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetFontFamilyName([Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontWeight">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteTextFormat::GetFontWeight()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontStyle">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_STYLE IDWriteTextFormat::GetFontStyle()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontStretch">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_STRETCH IDWriteTextFormat::GetFontStretch()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontSize">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteTextFormat::GetFontSize()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetLocaleNameLength">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteTextFormat::GetLocaleNameLength()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetLocaleName(System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="localeName">No documentation.</param>
            <param name="nameSize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetLocaleName([Out, Buffer] wchar_t* localeName,[None] int nameSize)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontFamilyName">
            <summary>	
            Gets a copy of the font family name. 	
            </summary>	
            <returns>the current font family name. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetFontFamilyName([Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.LocaleName">
            <summary>	
            Gets a copy of the locale name. 	
            </summary>	
            <returns>the current locale name.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetLocaleName([Out, Buffer] wchar_t* localeName,[None] int nameSize)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.TextAlignment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT IDWriteTextFormat::GetTextAlignment()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.ParagraphAlignment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT IDWriteTextFormat::GetParagraphAlignment()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.WordWrapping">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING IDWriteTextFormat::GetWordWrapping()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.ReadingDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextFormat::GetReadingDirection()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FlowDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION IDWriteTextFormat::GetFlowDirection()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.IncrementalTabStop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteTextFormat::GetIncrementalTabStop()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteTextFormat::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontWeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteTextFormat::GetFontWeight()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE IDWriteTextFormat::GetFontStyle()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontStretch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH IDWriteTextFormat::GetFontStretch()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteTextFormat::GetFontSize()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback">
            <summary>
            Internal TessellationSink Callback
            </summary>
        </member>
        <member name="P:SharpDX.DirectWrite.PixelSnappingCallback.CallbackPixelSnapping">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback.IsPixelSnappingDisabledDelegate">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <param name="isDisabled">Output disabled</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
            <unmanaged>HRESULT IsPixelSnappingDisabled([None] void* clientDrawingContext,[Out] BOOL* isDisabled)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback.GetCurrentTransformDelegate">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="transform">Matrix transform</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
            <unmanaged>HRESULT GetCurrentTransform([None] void* clientDrawingContext,[Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback.GetPixelsPerDipDelegate">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="pixelPerDip">Dip</param>
            <returns>the number of physical pixels per DIP</returns>
            <unmanaged>HRESULT GetPixelsPerDip([None] void* clientDrawingContext,[Out] FLOAT* pixelsPerDip)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.BitmapRenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteBitmapRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)">
            <summary>	
            Draws a run of glyphs to a bitmap target at the specified position.	
            </summary>	
            <remarks>	
            You can use the IDWriteBitmapRenderTarget::DrawGlyphRun to render to a bitmap from a custom text renderer that you implement.  The custom text renderer should call this method from within the <see cref="M:SharpDX.DirectWrite.TextRenderer.DrawGlyphRun(System.IntPtr,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)" /> callback method as shown in the following code. 	
            <code> STDMETHODIMP GdiTextRenderer::DrawGlyphRun( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, __in DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, IUnknown* clientDrawingEffect )	
            { HRESULT hr = S_OK; // Pass on the drawing call to the render target to do the real work. RECT dirtyRect = {0}; hr = pRenderTarget_-&gt;DrawGlyphRun( baselineOriginX, baselineOriginY, measuringMode, glyphRun, pRenderingParams_, RGB(0,200,255), &amp;dirtyRect ); return hr;	
            } </code>	
            
            The baselineOriginX, baslineOriginY, measuringMethod, and glyphRun parameters are provided (as arguments) when the callback method is invoked.  The renderingParams, textColor and blackBoxRect are not. Default rendering params can be retrieved by using the <see cref="M:SharpDX.DirectWrite.Factory.CreateMonitorRenderingParams(System.IntPtr,SharpDX.DirectWrite.RenderingParams@)" /> method.  	
            </remarks>	
            <param name="baselineOriginX">The horizontal position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="baselineOriginY">The vertical position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="measuringMode">The measuring method for glyphs in the run, used with the other properties to determine the rendering mode. </param>
            <param name="glyphRun">The structure containing the properties of the glyph run. </param>
            <param name="renderingParams">The object that controls rendering behavior. </param>
            <param name="textColor">The foreground color of the text. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::DrawGlyphRun([None] float baselineOriginX,[None] float baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[None] IDWriteRenderingParams* renderingParams,[None] COLORREF textColor,[Out, Optional] RECT* blackBoxRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.BitmapRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun@,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4,SharpDX.Rectangle@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="baselineOriginX">No documentation.</param>
            <param name="baselineOriginY">No documentation.</param>
            <param name="measuringMode">No documentation.</param>
            <param name="glyphRun">No documentation.</param>
            <param name="renderingParams">No documentation.</param>
            <param name="textColor">No documentation.</param>
            <param name="blackBoxRect">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::DrawGlyphRun([None] float baselineOriginX,[None] float baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[None] IDWriteRenderingParams* renderingParams,[None] COLORREF textColor,[Out, Optional] RECT* blackBoxRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetMemoryDC">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>void* IDWriteBitmapRenderTarget::GetMemoryDC()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetPixelsPerDip">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteBitmapRenderTarget::GetPixelsPerDip()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.SetPixelsPerDip(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pixelsPerDip">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::SetPixelsPerDip([None] float pixelsPerDip)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetCurrentTransform(SharpDX.DirectWrite.Matrix@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetCurrentTransform([Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.SetCurrentTransform(System.Nullable{SharpDX.DirectWrite.Matrix})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="transform">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::SetCurrentTransform([In, Optional] const DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetSize(System.Drawing.Size@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="size">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetSize([Out] SIZE* size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.Resize(System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="width">No documentation.</param>
            <param name="height">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::Resize([None] int width,[None] int height)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.MemoryDC">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void* IDWriteBitmapRenderTarget::GetMemoryDC()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.PixelsPerDip">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteBitmapRenderTarget::GetPixelsPerDip()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.CurrentTransform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetCurrentTransform([Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetSize([Out] SIZE* size)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback">
            <summary>
            Internal TextRenderer Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererCallback.#ctor(SharpDX.DirectWrite.TextRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextRendererCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.TextRendererCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawGlyphRunDelegate">
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawUnderlineDelegate">
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawStrikethroughDelegate">
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawInlineObjectDelegate">
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback">
            <summary>
            Internal TextAnalysisSource Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSourceCallback.#ctor(SharpDX.DirectWrite.TextAnalysisSource)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextAnalysisSourceCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSourceCallback.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SharpDX.DirectWrite.TextAnalysisSourceCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetTextAtPositionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextAtPosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetTextBeforePositionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextBeforePosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetParagraphReadingDirectionDelegate">
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextAnalysisSource::GetParagraphReadingDirection()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetLocaleNameDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetLocaleName([None] int textPosition,[Out] int* textLength,[Out] const wchar_t** localeName)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetNumberSubstitutionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetNumberSubstitution([None] int textPosition,[Out] int* textLength,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFace">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFace</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontFaceType,SharpDX.DirectWrite.FontFile[],System.Int32,SharpDX.DirectWrite.FontSimulations)">
            <summary>	
            Creates an object that represents a font face. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFaceType">A value that indicates the type of file format of the font face. </param>
            <param name="fontFiles">A font file object representing the font face. Because<see cref="T:SharpDX.DirectWrite.FontFace"/> maintains its own references to the input font file objects, you may release them after this call. </param>
            <param name="faceIndex">The zero-based index of a font face, in cases when the font files contain a collection of font faces. If the font files contain a single face, this value should be zero. </param>
            <param name="fontFaceSimulationFlags">A value that indicates which, if any, font face simulation flags for algorithmic means of making text bold or italic are applied to the current font face. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFace([None] DWRITE_FONT_FACE_TYPE fontFaceType,[None] int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[None] int faceIndex,[None] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.#ctor(SharpDX.DirectWrite.Font)">
            <summary>	
            Creates a font face object for the font. 	
            </summary>	
            <param name="font">the <see cref="T:SharpDX.DirectWrite.Font"/> to create the FontFace from.</param>
            <unmanaged>HRESULT IDWriteFont::CreateFontFace([Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetDesignGlyphMetrics(System.Int16[],System.Boolean)">
            <summary>	
            Obtains ideal (resolution-independent) glyph metrics in font design units.  	
            </summary>	
            <remarks>	
            Design glyph metrics are used for glyph positioning. 	
            </remarks>	
            <param name="glyphIndices">An array of glyph indices for which to compute  metrics. The array must contain at least as many elements as specified by glyphCount. </param>
            <param name="isSideways">Indicates whether the font is being used in a sideways run. This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation </param>
            <returns>an array of <see cref="T:SharpDX.DirectWrite.GlyphMetrics"/> structures. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetDesignGlyphMetrics([In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGdiCompatibleGlyphMetrics(System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,System.Int16[],System.Boolean)">
            <summary>	
            Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.	
            </summary>	
            <param name="fontSize">The ogical size of the font in DIP units. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and pixelsPerDip. </param>
            <param name="useGdiNatural">When set to FALSE, the metrics are the same as the metrics of GDI aliased text.  When set to TRUE, the metrics are the same as the metrics of text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. </param>
            <param name="glyphIndices">An array of glyph indices for which to compute the metrics. </param>
            <param name="isSideways">A BOOL value that indicates whether the font is being used in a sideways run.  This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation. </param>
            <returns>An array of <see cref="T:SharpDX.DirectWrite.GlyphMetrics" /> structures filled by this function. The metrics are in font design units. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleGlyphMetrics([None] float emSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphIndices(System.Int32[])">
            <summary>	
            Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table. 	
            </summary>	
            <remarks>	
            Note that this mapping is primarily provided for line layout engines built on top of the physical font API. Because of OpenType glyph substitution and line layout character substitution, the nominal conversion does not always correspond to how a Unicode string will map to glyph indices when rendering using a particular font face. Also, note that Unicode variant selectors provide for alternate mappings for character to glyph. This call will always return the default variant.  	
            </remarks>	
            <param name="codePoints">An array of USC4 code points from which to obtain nominal glyph indices. The array must be allocated and be able to contain the number of elements specified by codePointCount. </param>
            <returns>a reference to an array of nominal glyph indices filled by this function.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphIndices([In, Buffer] const int* codePoints,[None] int codePointCount,[Out, Buffer] short* glyphIndices)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetFiles">
            <summary>	
            Obtains the font files representing a font face. 	
            </summary>	
            <remarks>	
            The IDWriteFontFace::GetFiles method should be called twice.  The first time you call GetFilesfontFiles should be NULL. When the method returns, numberOfFiles receives the number of font files that represent the font face. Then, call the method a second time, passing the numberOfFiles value that was output the first call, and a non-null buffer of the correct size to store the <see cref="T:SharpDX.DirectWrite.FontFile"/> references. 	
            </remarks>	
            <returns>An array that stores references to font files representing the font face. This parameter can be NULL if the user wants only the number of files representing the font face. This API increments reference count of the font file references returned according to COM conventions, and the client should release them when finished. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetFiles([InOut] int* numberOfFiles,[Out, Buffer, Optional] IDWriteFontFile** fontFiles)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.TryGetFontTable(System.Int32,SharpDX.DataStream@,System.IntPtr@)">
            <summary>	
            Finds the specified OpenType font table if it exists and returns a reference to it. The function accesses the underlying font data through the <see cref="T:SharpDX.DirectWrite.FontFileStream" /> interface implemented by the font file loader. 	
            </summary>	
            <remarks>	
            The context for the same tag may be different for each call, so each one must be held and released separately.  	
            </remarks>	
            <param name="openTypeTableTag">The four-character tag of a OpenType font table to find. Use the DWRITE_MAKE_OPENTYPE_TAG macro to create it as an UINT32. Unlike GDI, it does not support the special TTCF and null tags to access the whole font. </param>
            <param name="tableData">When this method returns, contains the address of  a reference to the base of the table in memory. The reference is valid only as long as the font face used to get the font table still exists; (not any other font face, even if it actually refers to the same physical font).</param>
            <param name="tableContext">When this method returns, the address of a reference to  the opaque context, which must be freed by calling {{ReleaseFontTable}}. The context actually comes from the lower-level <see cref="T:SharpDX.DirectWrite.FontFileStream" />, which may be implemented by the application or DWrite itself. It is possible for a NULL tableContext to be returned, especially if the implementation performs direct memory mapping on the whole file. Nevertheless, always release it later, and do not use it as a test for function success. The same table can be queried multiple times, but because each returned context can be different, you must release each context separately.  </param>
            <returns>TRUE if the font table exists; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFontFace::TryGetFontTable([In] int openTypeTableTag,[Out, Buffer] const void** tableData,[Out] int* tableSize,[Out] void** tableContext,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphRunOutline(System.Single,System.Int16[],System.Single[],SharpDX.DirectWrite.GlyphOffset[],System.Boolean,System.Boolean,SharpDX.Direct2D1.SimplifiedGeometrySink)">
            <summary>	
            Computes the outline of a run of glyphs by calling back to the outline sink interface. 	
            </summary>	
            <param name="emSize">The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch. </param>
            <param name="glyphIndices">An array of glyph indices. The glyphs are in logical order and the advance direction depends on the isRightToLeft parameter. The array must be allocated and be able to contain the number of elements specified by glyphCount. </param>
            <param name="glyphAdvances">An optional array of glyph advances in DIPs. The advance of a glyph is the amount to advance the position (in the direction of the baseline) after drawing the glyph. glyphAdvances contains the number of elements specified by glyphIndices.Length. </param>
            <param name="glyphOffsets">An optional array of glyph offsets, each of which specifies the offset along the baseline and offset perpendicular to the baseline of a glyph relative to the current pen position.   glyphOffsets contains the number of elements specified by glyphIndices.Length. </param>
            <param name="isSideways">If TRUE, the ascender of the glyph runs alongside the baseline. If FALSE, the glyph ascender runs perpendicular to the baseline. For example, an English alphabet on a vertical baseline would have isSideways set to FALSE. A client can render a vertical run by setting isSideways to TRUE and rotating the resulting geometry 90 degrees to the right using a transform. The isSideways and isRightToLeft parameters cannot both be true. </param>
            <param name="isRightToLeft">The visual order of the glyphs. If this parameter is FALSE, then glyph advances are from left to right. If TRUE, the advance direction is right to left. By default, the advance direction is left to right. </param>
            <param name="geometrySink">A reference to the interface that is called back to perform outline drawing operations. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphRunOutline([None] float emSize,[In, Buffer] const short* glyphIndices,[In, Buffer, Optional] const float* glyphAdvances,[In, Buffer, Optional] const DWRITE_GLYPH_OFFSET* glyphOffsets,[None] int glyphCount,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IDWriteGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFace"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetFaceType">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_FACE_TYPE IDWriteFontFace::GetType()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetFiles(System.Int32@,SharpDX.DirectWrite.FontFile[])">
            <summary>	
            No documentation.	
            </summary>	
            <param name="numberOfFiles">No documentation.</param>
            <param name="fontFiles">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetFiles([InOut] int* numberOfFiles,[Out, Buffer, Optional] IDWriteFontFile** fontFiles)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetIndex">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteFontFace::GetIndex()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetSimulations">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFontFace::GetSimulations()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.IsSymbolFont_">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>BOOL IDWriteFontFace::IsSymbolFont()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetMetrics(SharpDX.DirectWrite.FontMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFaceMetrics">No documentation.</param>
            <unmanaged>void IDWriteFontFace::GetMetrics([Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>short IDWriteFontFace::GetGlyphCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetDesignGlyphMetrics(System.Int16[],System.Int32,SharpDX.DirectWrite.GlyphMetrics[],System.Boolean)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="glyphIndices">No documentation.</param>
            <param name="glyphCount">No documentation.</param>
            <param name="glyphMetrics">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetDesignGlyphMetrics([In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphIndices(System.Int32[],System.Int32,System.Int16[])">
            <summary>	
            No documentation.	
            </summary>	
            <param name="codePoints">No documentation.</param>
            <param name="codePointCount">No documentation.</param>
            <param name="glyphIndices">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphIndices([In, Buffer] const int* codePoints,[None] int codePointCount,[Out, Buffer] short* glyphIndices)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.TryGetFontTable(System.Int32,System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="openTypeTableTag">No documentation.</param>
            <param name="tableData">No documentation.</param>
            <param name="tableSize">No documentation.</param>
            <param name="tableContext">No documentation.</param>
            <param name="exists">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::TryGetFontTable([In] int openTypeTableTag,[Out, Buffer] const void** tableData,[Out] int* tableSize,[Out] void** tableContext,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.ReleaseFontTable(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="tableContext">No documentation.</param>
            <unmanaged>void IDWriteFontFace::ReleaseFontTable([In] void* tableContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphRunOutline_(System.Single,System.Int16[],System.Single[],SharpDX.DirectWrite.GlyphOffset[],System.Int32,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="emSize">No documentation.</param>
            <param name="glyphIndices">No documentation.</param>
            <param name="glyphAdvances">No documentation.</param>
            <param name="glyphOffsets">No documentation.</param>
            <param name="glyphCount">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <param name="isRightToLeft">No documentation.</param>
            <param name="geometrySink">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphRunOutline([None] float emSize,[In, Buffer] const short* glyphIndices,[In, Buffer, Optional] const float* glyphAdvances,[In, Buffer, Optional] const DWRITE_GLYPH_OFFSET* glyphOffsets,[None] int glyphCount,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IDWriteGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetRecommendedRenderingMode(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="emSize">No documentation.</param>
            <param name="pixelsPerDip">No documentation.</param>
            <param name="measuringMode">No documentation.</param>
            <param name="renderingParams">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetRecommendedRenderingMode([None] float emSize,[None] float pixelsPerDip,[None] DWRITE_MEASURING_MODE measuringMode,[None] IDWriteRenderingParams* renderingParams,[Out] DWRITE_RENDERING_MODE* renderingMode)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGdiCompatibleMetrics(System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix})">
            <summary>	
            No documentation.	
            </summary>	
            <param name="emSize">No documentation.</param>
            <param name="pixelsPerDip">No documentation.</param>
            <param name="transform">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleMetrics([None] float emSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGdiCompatibleGlyphMetrics(System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,System.Int16[],System.Int32,SharpDX.DirectWrite.GlyphMetrics[],System.Boolean)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="emSize">No documentation.</param>
            <param name="pixelsPerDip">No documentation.</param>
            <param name="transform">No documentation.</param>
            <param name="useGdiNatural">No documentation.</param>
            <param name="glyphIndices">No documentation.</param>
            <param name="glyphCount">No documentation.</param>
            <param name="glyphMetrics">No documentation.</param>
            <param name="isSideways">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleGlyphMetrics([None] float emSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.FaceType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE IDWriteFontFace::GetType()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.Index">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int IDWriteFontFace::GetIndex()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.Simulations">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFontFace::GetSimulations()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.IsSymbolFont">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL IDWriteFontFace::IsSymbolFont()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.Metrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void IDWriteFontFace::GetMetrics([Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.GlyphCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>short IDWriteFontFace::GetGlyphCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextLayout">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteTextLayout</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.TextFormat,System.Single,System.Single)">
            <summary>	
             Takes a string, text format, and associated constraints, and produces an object that represents the fully analyzed and formatted result. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters.</param>
            <param name="textFormat">A pointer to an object that indicates the format to apply to the string.</param>
            <param name="maxWidth">The width of the layout box.</param>
            <param name="maxHeight">The height of the layout box.</param>
            <unmanaged>HRESULT CreateTextLayout([In, Buffer] const wchar* string,[None] UINT32 stringLength,[None] IDWriteTextFormat* textFormat,[None] FLOAT maxWidth,[None] FLOAT maxHeight,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
            <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float layoutWidth,[None] float layoutHeight,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specifies the font size and pixels per DIP. </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
            <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float layoutWidth,[None] float layoutHeight,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.Draw(SharpDX.DirectWrite.TextRenderer,System.Single,System.Single)">
            <summary>	
             Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)"/>. After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called. 	
            </remarks>	
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string.</param>
            <param name="originX">The x-coordinate of the layout's left side.</param>
            <param name="originY">The y-coordinate of the layout's top side.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] FLOAT originX,[None] FLOAT originY)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.Draw(System.Object,SharpDX.DirectWrite.TextRenderer,System.Single,System.Single)">
            <summary>	
             Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)"/>. After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called. 	
            </remarks>	
            <param name="clientDrawingContext">An application-defined drawing context. </param>
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string.</param>
            <param name="originX">The x-coordinate of the layout's left side.</param>
            <param name="originY">The y-coordinate of the layout's top side.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] FLOAT originX,[None] FLOAT originY)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetClusterMetrics">
            <summary>	
            Retrieves logical properties and measurements of each glyph cluster. 	
            </summary>	
            <remarks>	
            If maxClusterCount is not large enough, then E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and actualClusterCount is set to the number of clusters needed.  	
            </remarks>	
            <returns>Returns metrics, such as line-break or total advance width, for a glyph cluster. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetClusterMetrics([Out, Buffer, Optional] DWRITE_CLUSTER_METRICS* clusterMetrics,[None] int maxClusterCount,[Out] int* actualClusterCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the application-defined drawing effect. 	
            </summary>	
            <remarks>	
            An <see cref="T:SharpDX.Direct2D1.Brush"/>, such as a color or gradient brush, can be set as a drawing effect if you are using the <see cref="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)"/> to draw text and that brush will be used to draw the specified range of text.  This drawing effect is associated with the specified range and will be passed back to the application by way of the callback when the range is drawn at drawing time.  	
            </remarks>	
            <param name="drawingEffect">Application-defined drawing effects that apply to the range. This data object will be passed back to the application's drawing callbacks for final rendering. </param>
            <param name="textRange">The text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetDrawingEffect([None] IUnknown* drawingEffect,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetDrawingEffect(System.Int32)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <returns>a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([None] int currentPosition,[Out] IUnknown** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetDrawingEffect(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <param name="textRange">Contains the range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the drawing effect. </param>
            <returns>a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([None] int currentPosition,[Out] IUnknown** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontCollection(System.Int32)">
            <summary>	
            Gets the font collection associated with the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a  reference to the current font collection.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontCollection([None] int currentPosition,[Out] IDWriteFontCollection** fontCollection,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32)">
            <summary>	
            Gets the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <returns>the font family name </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([None] int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font family name. </param>
            <returns>the font family name </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([None] int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontSize(System.Int32)">
            <summary>	
            Gets the font em height of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>the size of the font in ems  of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontSize([None] int currentPosition,[Out] float* fontSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStretch(System.Int32)">
            <summary>	
            Gets the font stretch of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font stretch (also known as width) being applied at the specified position.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStretch([None] int currentPosition,[Out] DWRITE_FONT_STRETCH* fontStretch,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStyle(System.Int32)">
            <summary>	
            Gets the font style (also known as slope) of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font style (also known as slope or incline) being applied at the specified position.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStyle([None] int currentPosition,[Out] DWRITE_FONT_STYLE* fontStyle,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontWeight(System.Int32)">
            <summary>	
            Gets the font weight of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font weight being applied at the specified position.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontWeight([None] int currentPosition,[Out] DWRITE_FONT_WEIGHT* fontWeight,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetInlineObject(System.Int32)">
            <summary>	
            Gets the inline object at the specified position. 	
            </summary>	
            <param name="currentPosition">The specified text position. </param>
            <returns>an application-defined inline object. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetInlineObject([None] int currentPosition,[Out] IDWriteInlineObject** inlineObject,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLineMetrics">
            <summary>	
            Retrieves the information about each individual text line of the  text string. 	
            </summary>	
            <remarks>	
            If maxLineCount is not large enough E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and *actualLineCount is set to the number of lines needed.  	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS* lineMetrics,[None] int maxLineCount,[Out] int* actualLineCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleName(System.Int32)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>the locale name of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([None] int currentPosition,[Out, Buffer] wchar_t* localeName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleName(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name. </param>
            <returns>the locale name of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([None] int currentPosition,[Out, Buffer] wchar_t* localeName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasStrikethrough(System.Int32)">
            <summary>	
            Get the strikethrough presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>A Boolean  flag that indicates whether strikethrough is present at the position indicated by currentPosition. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetStrikethrough([None] int currentPosition,[Out] BOOL* hasStrikethrough,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetTypography(System.Int32)">
            <summary>	
            Gets the typography setting of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a  reference to the current typography setting. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetTypography([None] int currentPosition,[Out] IDWriteTypography** typography,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasUnderline(System.Int32)">
            <summary>	
            Gets the underline presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The current text position. </param>
            <returns>A Boolean  flag that indicates whether underline is present at the position indicated by currentPosition. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetUnderline([None] int currentPosition,[Out] BOOL* hasUnderline,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestPoint(System.Single,System.Single,System.Boolean@,System.Boolean@)">
            <summary>	
            The application calls this function passing in a specific pixel location relative to the top-left location of the layout box and obtains the information about the correspondent hit-test metrics of the text string where the hit-test has occurred. When the specified pixel location is outside the text string, the function sets the output value *isInside to FALSE. 	
            </summary>	
            <param name="pointX">The pixel location X to hit-test, relative to the top-left location of the layout box. </param>
            <param name="pointY">The pixel location Y to hit-test, relative to the top-left location of the layout box. </param>
            <param name="isTrailingHit">An output flag that indicates whether the hit-test location is at the leading or the trailing side of the character. When the output *isInside value is set to FALSE, this value is set according to the output hitTestMetrics-&gt;textPosition value to represent the edge closest to the hit-test location. </param>
            <param name="isInside">An output flag that indicates whether the hit-test location is inside the text string. When FALSE, the position nearest the text's edge is returned. </param>
            <returns>The output geometry fully enclosing the hit-test location. When the output *isInside value is set to FALSE, this structure represents the geometry enclosing the edge closest to the hit-test location.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestPoint([None] float pointX,[None] float pointY,[Out] BOOL* isTrailingHit,[Out] BOOL* isInside,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestTextRange(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>	
            The application calls this function to get a set of hit-test metrics corresponding to a range of text positions. One of the main usages is to implement highlight selection of the text string. The function returns E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), when the buffer size of hitTestMetrics is too small to hold all the regions calculated by the function. In this situation, the function sets the output value *actualHitTestMetricsCount to the number of geometries calculated. The application is responsible for allocating a new buffer of greater size and calling the function again. A good value to use as an initial value for maxHitTestMetricsCount may be calculated from the following equation: maxHitTestMetricsCount = lineCount * maxBidiReorderingDepth where lineCount is obtained from the value of the output argument *actualLineCount (from the function IDWriteTextLayout::GetLineLengths), and the maxBidiReorderingDepth value from the DWRITE_TEXT_METRICS structure of the output argument *textMetrics (from the function IDWriteFactory::CreateTextLayout). 	
            </summary>	
            <param name="textPosition">The first text position of the specified range. </param>
            <param name="textLength">The number of positions of the specified range. </param>
            <param name="originX">The origin pixel location X at the left of the layout box. This offset is added to the hit-test metrics returned. </param>
            <param name="originY">The origin pixel location Y at the top of the layout box. This offset is added to the hit-test metrics returned. </param>
            <returns>a reference to a buffer of the output geometry fully enclosing the specified position range.  The buffer must be at least as large as maxHitTestMetricsCount. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestTextRange([None] int textPosition,[None] int textLength,[None] float originX,[None] float originY,[Out, Buffer, Optional] DWRITE_HIT_TEST_METRICS* hitTestMetrics,[None] int maxHitTestMetricsCount,[Out] int* actualHitTestMetricsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextLayout"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetMaxWidth(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="maxWidth">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetMaxWidth([None] float maxWidth)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetMaxHeight(System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="maxHeight">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetMaxHeight([None] float maxHeight)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontCollection(SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontCollection">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontCollection([None] IDWriteFontCollection* fontCollection,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontFamilyName(System.String,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFamilyName">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontFamilyName([In] const wchar_t* fontFamilyName,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontWeight(SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontWeight">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontWeight([None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontStyle(SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontStyle">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontStyle([None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontStretch(SharpDX.DirectWrite.FontStretch,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontStretch">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontStretch([None] DWRITE_FONT_STRETCH fontStretch,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontSize(System.Single,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontSize">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontSize([None] float fontSize,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetUnderline(System.Boolean,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="hasUnderline">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetUnderline([None] BOOL hasUnderline,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetStrikethrough(System.Boolean,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="hasStrikethrough">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetStrikethrough([None] BOOL hasStrikethrough,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect_(System.IntPtr,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="drawingEffect">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetDrawingEffect([None] void* drawingEffect,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetInlineObject_(System.IntPtr,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="inlineObject">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetInlineObject([None] IDWriteInlineObject* inlineObject,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetTypography(SharpDX.DirectWrite.Typography,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="typography">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetTypography([None] IDWriteTypography* typography,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetLocaleName(System.String,SharpDX.DirectWrite.TextRange)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="localeName">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetLocaleName([In] const wchar_t* localeName,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetMaxWidth">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteTextLayout::GetMaxWidth()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetMaxHeight">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>float IDWriteTextLayout::GetMaxHeight()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontCollection(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontCollection([None] int currentPosition,[Out] IDWriteFontCollection** fontCollection,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyNameLength(System.Int32,System.Int32@,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="nameLength">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyNameLength([None] int currentPosition,[Out] int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32,System.IntPtr,System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="fontFamilyName">No documentation.</param>
            <param name="nameSize">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([None] int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontWeight(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontWeight([None] int currentPosition,[Out] DWRITE_FONT_WEIGHT* fontWeight,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStyle(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStyle([None] int currentPosition,[Out] DWRITE_FONT_STYLE* fontStyle,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStretch(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStretch([None] int currentPosition,[Out] DWRITE_FONT_STRETCH* fontStretch,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontSize(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontSize([None] int currentPosition,[Out] float* fontSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasUnderline(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetUnderline([None] int currentPosition,[Out] BOOL* hasUnderline,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasStrikethrough(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetStrikethrough([None] int currentPosition,[Out] BOOL* hasStrikethrough,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetDrawingEffect_(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([None] int currentPosition,[Out] void** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetInlineObject(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetInlineObject([None] int currentPosition,[Out] IDWriteInlineObject** inlineObject,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetTypography(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetTypography([None] int currentPosition,[Out] IDWriteTypography** typography,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleNameLength(System.Int32,System.Int32@,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="nameLength">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleNameLength([None] int currentPosition,[Out] int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleName(System.Int32,System.IntPtr,System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="currentPosition">No documentation.</param>
            <param name="localeName">No documentation.</param>
            <param name="nameSize">No documentation.</param>
            <param name="textRange">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([None] int currentPosition,[Out, Buffer] wchar_t* localeName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="clientDrawingContext">No documentation.</param>
            <param name="renderer">No documentation.</param>
            <param name="originX">No documentation.</param>
            <param name="originY">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLineMetrics(SharpDX.DirectWrite.LineMetrics[],System.Int32,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="lineMetrics">No documentation.</param>
            <param name="maxLineCount">No documentation.</param>
            <param name="actualLineCount">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS* lineMetrics,[None] int maxLineCount,[Out] int* actualLineCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetMetrics(SharpDX.DirectWrite.TextMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textMetrics">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetMetrics([Out] DWRITE_TEXT_METRICS* textMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetOverhangMetrics(SharpDX.DirectWrite.OverhangMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="overhangs">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetClusterMetrics(SharpDX.DirectWrite.ClusterMetrics[],System.Int32,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="clusterMetrics">No documentation.</param>
            <param name="maxClusterCount">No documentation.</param>
            <param name="actualClusterCount">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetClusterMetrics([Out, Buffer, Optional] DWRITE_CLUSTER_METRICS* clusterMetrics,[None] int maxClusterCount,[Out] int* actualClusterCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.DetermineMinWidth">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::DetermineMinWidth([Out] float* minWidth)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestPoint(System.Single,System.Single,System.Int32@,System.Int32@,SharpDX.DirectWrite.HitTestMetrics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pointX">No documentation.</param>
            <param name="pointY">No documentation.</param>
            <param name="isTrailingHit">No documentation.</param>
            <param name="isInside">No documentation.</param>
            <param name="hitTestMetrics">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestPoint([None] float pointX,[None] float pointY,[Out] BOOL* isTrailingHit,[Out] BOOL* isInside,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestTextPosition(System.Int32,System.Boolean,System.Single@,System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textPosition">No documentation.</param>
            <param name="isTrailingHit">No documentation.</param>
            <param name="ointXRef">No documentation.</param>
            <param name="ointYRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestTextPosition([None] int textPosition,[None] BOOL isTrailingHit,[Out] float* pointX,[Out] float* pointY,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestTextRange(System.Int32,System.Int32,System.Single,System.Single,SharpDX.DirectWrite.HitTestMetrics[],System.Int32,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="textPosition">No documentation.</param>
            <param name="textLength">No documentation.</param>
            <param name="originX">No documentation.</param>
            <param name="originY">No documentation.</param>
            <param name="hitTestMetrics">No documentation.</param>
            <param name="maxHitTestMetricsCount">No documentation.</param>
            <param name="actualHitTestMetricsCount">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestTextRange([None] int textPosition,[None] int textLength,[None] float originX,[None] float originY,[Out, Buffer, Optional] DWRITE_HIT_TEST_METRICS* hitTestMetrics,[None] int maxHitTestMetricsCount,[Out] int* actualHitTestMetricsCount)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.MaxWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteTextLayout::GetMaxWidth()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.MaxHeight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float IDWriteTextLayout::GetMaxHeight()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.Metrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteTextLayout::GetMetrics([Out] DWRITE_TEXT_METRICS* textMetrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.OverhangMetrics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteTextLayout::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFile">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFile</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(SharpDX.DirectWrite.Factory,System.String)">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const __int64* lastWriteTime,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(SharpDX.DirectWrite.Factory,System.String,System.Nullable{System.Int64})">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
            <param name="lastWriteTime">The last modified time of the input file path. If the parameter is omitted, the function will access the font file to obtain its last write time. You should specify this value to avoid extra disk access. Subsequent operations on the constructed object may fail if the user provided lastWriteTime doesn't match the file on the disk. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const __int64* lastWriteTime,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(SharpDX.DirectWrite.Factory,System.IntPtr,System.Int32,SharpDX.DirectWrite.FontFileLoader)">
            <summary>
            Creates a reference to an application-specific font file resource.
            </summary>
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFileReferenceKey">A font file reference key that uniquely identifies the font file resource during the lifetime of fontFileLoader.</param>
            <param name="fontFileReferenceKeySize">The size of the font file reference key in bytes.</param>
            <param name="fontFileLoader">The font file loader that will be used by the font system to load data from the file identified by fontFileReferenceKey.</param>
            <remarks>
            This function is provided for cases when an application or a document needs to use a private font without having to install it on the system. fontFileReferenceKey has to be unique only in the scope of the fontFileLoader used in this call.
            </remarks>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontFileReference([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[None] IDWriteFontFileLoader* fontFileLoader,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.GetReferenceKey">
            <summary>	
            Obtains the reference to the reference key of a font file. The returned reference is valid until the font file object is released.  	
            </summary>	
            <returns>the reference to the reference key of a font file. </returns>
            <unmanaged>HRESULT IDWriteFontFile::GetReferenceKey([Out, Buffer] const void** fontFileReferenceKey,[Out] int* fontFileReferenceKeySize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFile"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.GetReferenceKey(System.IntPtr,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileReferenceKey">No documentation.</param>
            <param name="fontFileReferenceKeySize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFile::GetReferenceKey([Out, Buffer] const void** fontFileReferenceKey,[Out] int* fontFileReferenceKeySize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.GetLoader(SharpDX.DirectWrite.FontFileLoader@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileLoader">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFile::GetLoader([Out] IDWriteFontFileLoader** fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.Analyze(System.Int32@,SharpDX.DirectWrite.FontFileType@,SharpDX.DirectWrite.FontFaceType@,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="isSupportedFontType">No documentation.</param>
            <param name="fontFileType">No documentation.</param>
            <param name="fontFaceType">No documentation.</param>
            <param name="numberOfFaces">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFile::Analyze([Out] BOOL* isSupportedFontType,[Out] DWRITE_FONT_FILE_TYPE* fontFileType,[Out, Optional] DWRITE_FONT_FACE_TYPE* fontFaceType,[Out] int* numberOfFaces)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFile.Loader">
            <summary>	
            Obtains the file loader associated with a font file object. 	
            </summary>	
            <unmanaged>HRESULT IDWriteFontFile::GetLoader([Out] IDWriteFontFileLoader** fontFileLoader)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.AlphaMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Premultiplied">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Straight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_STRAIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Ignore">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_IGNORE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Gamma">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GAMMA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Gamma.StandardRgb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GAMMA_2_2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Gamma.Linear">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GAMMA_1_0</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.OpacityMaskContent">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.OpacityMaskContent.Graphics">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.OpacityMaskContent.TextNatural">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.OpacityMaskContent.TextGdiCompatible">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.ExtendMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ExtendMode.Clamp">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE_CLAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ExtendMode.Wrap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE_WRAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ExtendMode.Mirror">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE_MIRROR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.AntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AntialiasMode.PerPrimitive">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AntialiasMode.Aliased">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TextAntialiasMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Cleartype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Grayscale">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Aliased">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapInterpolationMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapInterpolationMode.NearestNeighbor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DrawTextOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawTextOptions.NoSnap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawTextOptions.Clip">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawTextOptions.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.ArcSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSize.Small">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE_SMALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSize.Large">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE_LARGE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.CapStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Flat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_FLAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Square">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_SQUARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Round">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_ROUND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Triangle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_TRIANGLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DashStyle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Solid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_SOLID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Dash">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DASH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Dot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.DashDot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DASH_DOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.DashDotDot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Custom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_CUSTOM</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LineJoin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.Miter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_MITER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.Bevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_BEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.Round">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_ROUND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.MiterOrBevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.CombineMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Union">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_UNION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Intersect">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_INTERSECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Xor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_XOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Exclude">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_EXCLUDE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometryRelation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Disjoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.IsContained">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Contains">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Overlap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySimplificationOption">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometrySimplificationOption.CubicsAndLines">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometrySimplificationOption.Lines">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FigureBegin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FIGURE_BEGIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureBegin.Filled">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FIGURE_BEGIN_FILLED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureBegin.Hollow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FigureEnd">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FIGURE_END</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureEnd.Open">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FIGURE_END_OPEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureEnd.Closed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FIGURE_END_CLOSED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PathSegment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PathSegment.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PathSegment.ForceUnstroked">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PathSegment.ForceRoundLineJoin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.SweepDirection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.SweepDirection.CounterClockwise">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.SweepDirection.Clockwise">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FillMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FILL_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FillMode.Alternate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FILL_MODE_ALTERNATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FillMode.Winding">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FILL_MODE_WINDING</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LayerOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerOptions.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerOptions.InitializeForCleartype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.WindowState">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_WINDOW_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.WindowState.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_WINDOW_STATE_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.WindowState.Occluded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_WINDOW_STATE_OCCLUDED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTargetType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetType.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetType.Software">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetType.Hardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FeatureLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FeatureLevel.Level_DEFAULT">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FeatureLevel.Level_9">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL_9</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FeatureLevel.Level_10">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL_10</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTargetUsage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetUsage.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetUsage.ForceBitmapRemoting">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetUsage.GdiCompatible">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PresentOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PresentOptions.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PresentOptions.RetainContents">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PresentOptions.Immediately">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.CompatibleRenderTargetOptions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CompatibleRenderTargetOptions.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CompatibleRenderTargetOptions.GdiCompatible">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DeviceContextInitializeMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DC_INITIALIZE_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DeviceContextInitializeMode.Copy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DeviceContextInitializeMode.Clear">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DebugLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.Error">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_ERROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.Warning">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_WARNING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.Information">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FactoryType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FACTORY_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FactoryType.SingleThreaded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FactoryType.MultiThreaded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback">
            <summary>
            Internal FontFileStream Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamCallback.#ctor(SharpDX.DirectWrite.FontFileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileStreamCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileStreamCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.ReadFileFragmentDelegate">
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.ReleaseFileFragmentDelegate">
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.GetFileSizeDelegate">
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.GetLastWriteTimeDelegate">
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Matrix3x2">
            <summary>
            Direct2D Matrix 3x2. Use <see cref="T:SharpDX.Matrix"/> and explicit cast to <see cref="T:SharpDX.Direct2D1.Matrix3x2"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M11">
            <summary>
            Element (1,1)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M12">
            <summary>
            Element (1,2)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M21">
            <summary>
            Element (2,1)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M22">
            <summary>
            Element (2,2)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M31">
            <summary>
            Element (3,1)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M32">
            <summary>
            Element (3,2)
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Matrix3x2.op_Explicit(SharpDX.Matrix)~SharpDX.Direct2D1.Matrix3x2">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Matrix"/> to <see cref="T:SharpDX.Direct2D1.Matrix3x2"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SharpDX.Direct2D1.Matrix3x2.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback">
            <summary>
            Internal InlineObject Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectCallback.#ctor(SharpDX.DirectWrite.InlineObject)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.InlineObjectCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.DrawDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.GetMetricsDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.GetOverhangMetricsDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.GetBreakConditionsDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollectionLoader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontCollectionLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollectionLoader.CreateEnumeratorFromKey(SharpDX.DirectWrite.Factory,SharpDX.DataStream)">
            <summary>	
            Creates a font file enumerator object that encapsulates a collection of font files. The font system calls back to this interface to create a font collection. 	
            </summary>	
            <param name="factory">Pointer to the <see cref="T:SharpDX.DirectWrite.Factory"/> object that was used to create the current font collection. </param>
            <param name="collectionKey">A font collection key that uniquely identifies the collection of font files within the scope of the font collection loader being used. The buffer allocated for this key must be at least  the size, in bytes, specified by collectionKeySize. </param>
            <returns>a reference to the newly created font file enumerator.</returns>
            <unmanaged>HRESULT IDWriteFontCollectionLoader::CreateEnumeratorFromKey([None] IDWriteFactory* factory,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontFileEnumerator** fontFileEnumerator)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.D2D1">
            <summary>
            D2D1 Functions.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.CreateFactory(SharpDX.Direct2D1.FactoryType,System.Guid,System.Nullable{SharpDX.Direct2D1.FactoryOptions},System.IntPtr@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="factoryType">No documentation.</param>
            <param name="riid">No documentation.</param>
            <param name="factoryOptionsRef">No documentation.</param>
            <param name="iFactoryRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT D2D1CreateFactory([In] D2D1_FACTORY_TYPE factoryType,[In] GUID* riid,[In, Optional] const D2D1_FACTORY_OPTIONS* pFactoryOptions,[Out] void** ppIFactory)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.MakeRotateMatrix(System.Single,System.Drawing.PointF,SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="angle">No documentation.</param>
            <param name="center">No documentation.</param>
            <param name="matrix">No documentation.</param>
            <unmanaged>void D2D1MakeRotateMatrix([In] float angle,[In] D2D1_POINT_2F center,[Out] D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.MakeSkewMatrix(System.Single,System.Single,System.Drawing.PointF,SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="angleX">No documentation.</param>
            <param name="angleY">No documentation.</param>
            <param name="center">No documentation.</param>
            <param name="matrix">No documentation.</param>
            <unmanaged>void D2D1MakeSkewMatrix([In] float angleX,[In] float angleY,[In] D2D1_POINT_2F center,[Out] D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.IsMatrixInvertible(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="matrix">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>BOOL D2D1IsMatrixInvertible([In] const D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.InvertMatrix(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="matrix">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>BOOL D2D1InvertMatrix([InOut] D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.NumberSubstitution">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteNumberSubstitution</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.NumberSubstitution.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean)">
            <summary>	
            Creates a number substitution object using a locale name, substitution method, and an indicator  whether to ignore user overrides (use NLS defaults for the given culture instead). 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="substitutionMethod">A value that specifies how to apply number substitution on digits and related punctuation. </param>
            <param name="localeName">The name of the locale to be used in the numberSubstitution object. </param>
            <param name="ignoreUserOverride">A Boolean flag that indicates whether to ignore user overrides. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateNumberSubstitution([In] DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,[In] const wchar_t* localeName,[In] BOOL ignoreUserOverride,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.NumberSubstitution.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.NumberSubstitution"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="T:SharpDX.DirectWrite.LocalFontFileLoader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteLocalFontFileLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.LocalFontFileLoader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.GetFilePathLengthFromKey(System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileReferenceKey">No documentation.</param>
            <param name="fontFileReferenceKeySize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetFilePathLengthFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] int* filePathLength)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.GetFilePathFromKey(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileReferenceKey">No documentation.</param>
            <param name="fontFileReferenceKeySize">No documentation.</param>
            <param name="filePath">No documentation.</param>
            <param name="filePathSize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetFilePathFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out, Buffer] wchar_t* filePath,[None] int filePathSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.GetLastWriteTimeFromKey(System.IntPtr,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontFileReferenceKey">No documentation.</param>
            <param name="fontFileReferenceKeySize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontList">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontList</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontList"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.GetFontCollection(SharpDX.DirectWrite.FontCollection@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fontCollection">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontList::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.GetFontCount">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>int IDWriteFontList::GetFontCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.GetFont(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="index">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontList::GetFont([None] int index,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontList.FontCollection">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteFontList::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontList.FontCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int IDWriteFontList::GetFontCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFamily">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFamily</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFamily"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.GetFamilyNames(SharpDX.DirectWrite.LocalizedStrings@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="names">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFamily::GetFamilyNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.GetFirstMatchingFont(SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStretch,SharpDX.DirectWrite.FontStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="weight">No documentation.</param>
            <param name="stretch">No documentation.</param>
            <param name="style">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFamily::GetFirstMatchingFont([None] DWRITE_FONT_WEIGHT weight,[None] DWRITE_FONT_STRETCH stretch,[None] DWRITE_FONT_STYLE style,[Out] IDWriteFont** matchingFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.GetMatchingFonts(SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStretch,SharpDX.DirectWrite.FontStyle)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="weight">No documentation.</param>
            <param name="stretch">No documentation.</param>
            <param name="style">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFamily::GetMatchingFonts([None] DWRITE_FONT_WEIGHT weight,[None] DWRITE_FONT_STRETCH stretch,[None] DWRITE_FONT_STYLE style,[Out] IDWriteFontList** matchingFonts)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFamily.FamilyNames">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDWriteFontFamily::GetFamilyNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamNative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDWriteFontFileStream</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileStreamNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReadFileFragment_(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fragmentStart">No documentation.</param>
            <param name="fileOffset">No documentation.</param>
            <param name="fragmentSize">No documentation.</param>
            <param name="fragmentContext">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReleaseFileFragment_(System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fragmentContext">No documentation.</param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetFileSize_(System.Int64@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="fileSize">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetLastWriteTime_(System.Int64@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="lastWriteTime">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:SharpDX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of  </param>
            <returns>a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReleaseFileFragment(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetFileSize">
            <summary>	
            Obtains the total size of a file. 	
            </summary>	
            <remarks>	
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).  	
            </remarks>	
            <returns>the total size of the file. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetLastWriteTime">
            <summary>	
            Obtains the last modified time of the file.  	
            </summary>	
            <remarks>	
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one. 	
            </remarks>	
            <returns>the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRunItem">
            <summary>
            A <see cref="T:SharpDX.DirectWrite.GlyphRunItem"/> Item.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunItem.Index">
            <summary>
            A glyph index
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunItem.Advance">
            <summary>
            A glyph advance
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunItem.Offset">
            <summary>
            A glyph offset
            </summary>
        </member>
    </members>
</doc>
